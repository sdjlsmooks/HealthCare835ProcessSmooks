/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_835;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.util.List;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    

public class Loop2100ClaimPaymentInformation implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private ClaimPaymentInformation claimPaymentInformation;
    private List<ClaimAdjustment> claimAdjustment;
    private PatientName patientName;
    private InsuredName insuredName;
    private CorrectedPatientName correctedPatientName;
    private ServiceProviderName serviceProviderName;
    private CrossoverCarrierName crossoverCarrierName;
    private CorrectedPriorityPayerName correctedPriorityPayerName;
    private OtherSubscriberName otherSubscriberName;
    private InpatientAdjudicationInformation inpatientAdjudicationInformation;
    private OutPatientAdjudicationInformation outPatientAdjudicationInformation;
    private List<OtherClaimRelatedIdentification> otherClaimRelatedIdentification;
    private RenderingProviderIdentification renderingProviderIdentification;
    private List<StatementFromOrToDate> statementFromOrToDate;
    private CoverageExpirationDate coverageExpirationDate;
    private ClaimRecievedDate claimRecievedDate;
    private List<ClaimContactInformation> claimContactInformation;
    private List<ClaimSupplementalInformation> claimSupplementalInformation;
    private List<ClaimSIQuantity> claimSIQuantity;
    private List<Loop2110SPI> loop2110SPI;

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = writer;

        if(claimPaymentInformation != null) {
            nodeWriter.write("CLP");
            nodeWriter.write(delimiters.getField());
            claimPaymentInformation.write(nodeWriter, delimiters);
        }
        if(claimAdjustment != null && !claimAdjustment.isEmpty()) {
            for(ClaimAdjustment claimAdjustmentInst : claimAdjustment) {
                nodeWriter.write("CAS");
                nodeWriter.write(delimiters.getField());
                claimAdjustmentInst.write(nodeWriter, delimiters);
            }
        }
        if(patientName != null) {
            nodeWriter.write("NM1");
            nodeWriter.write(delimiters.getField());
            patientName.write(nodeWriter, delimiters);
        }
        if(insuredName != null) {
            nodeWriter.write("NM1");
            nodeWriter.write(delimiters.getField());
            insuredName.write(nodeWriter, delimiters);
        }
        if(correctedPatientName != null) {
            nodeWriter.write("NM1");
            nodeWriter.write(delimiters.getField());
            correctedPatientName.write(nodeWriter, delimiters);
        }
        if(serviceProviderName != null) {
            nodeWriter.write("NM1");
            nodeWriter.write(delimiters.getField());
            serviceProviderName.write(nodeWriter, delimiters);
        }
        if(crossoverCarrierName != null) {
            nodeWriter.write("NM1");
            nodeWriter.write(delimiters.getField());
            crossoverCarrierName.write(nodeWriter, delimiters);
        }
        if(correctedPriorityPayerName != null) {
            nodeWriter.write("NM1");
            nodeWriter.write(delimiters.getField());
            correctedPriorityPayerName.write(nodeWriter, delimiters);
        }
        if(otherSubscriberName != null) {
            nodeWriter.write("NM1");
            nodeWriter.write(delimiters.getField());
            otherSubscriberName.write(nodeWriter, delimiters);
        }
        if(inpatientAdjudicationInformation != null) {
            nodeWriter.write("MIA");
            nodeWriter.write(delimiters.getField());
            inpatientAdjudicationInformation.write(nodeWriter, delimiters);
        }
        if(outPatientAdjudicationInformation != null) {
            nodeWriter.write("MOA");
            nodeWriter.write(delimiters.getField());
            outPatientAdjudicationInformation.write(nodeWriter, delimiters);
        }
        if(otherClaimRelatedIdentification != null && !otherClaimRelatedIdentification.isEmpty()) {
            for(OtherClaimRelatedIdentification otherClaimRelatedIdentificationInst : otherClaimRelatedIdentification) {
                nodeWriter.write("REF");
                nodeWriter.write(delimiters.getField());
                otherClaimRelatedIdentificationInst.write(nodeWriter, delimiters);
            }
        }
        if(renderingProviderIdentification != null) {
            nodeWriter.write("REF");
            nodeWriter.write(delimiters.getField());
            renderingProviderIdentification.write(nodeWriter, delimiters);
        }
        if(statementFromOrToDate != null && !statementFromOrToDate.isEmpty()) {
            for(StatementFromOrToDate statementFromOrToDateInst : statementFromOrToDate) {
                nodeWriter.write("DTM");
                nodeWriter.write(delimiters.getField());
                statementFromOrToDateInst.write(nodeWriter, delimiters);
            }
        }
        if(coverageExpirationDate != null) {
            nodeWriter.write("DTM");
            nodeWriter.write(delimiters.getField());
            coverageExpirationDate.write(nodeWriter, delimiters);
        }
        if(claimRecievedDate != null) {
            nodeWriter.write("DTM");
            nodeWriter.write(delimiters.getField());
            claimRecievedDate.write(nodeWriter, delimiters);
        }
        if(claimContactInformation != null && !claimContactInformation.isEmpty()) {
            for(ClaimContactInformation claimContactInformationInst : claimContactInformation) {
                nodeWriter.write("PER");
                nodeWriter.write(delimiters.getField());
                claimContactInformationInst.write(nodeWriter, delimiters);
            }
        }
        if(claimSupplementalInformation != null && !claimSupplementalInformation.isEmpty()) {
            for(ClaimSupplementalInformation claimSupplementalInformationInst : claimSupplementalInformation) {
                nodeWriter.write("AMT");
                nodeWriter.write(delimiters.getField());
                claimSupplementalInformationInst.write(nodeWriter, delimiters);
            }
        }
        if(claimSIQuantity != null && !claimSIQuantity.isEmpty()) {
            for(ClaimSIQuantity claimSIQuantityInst : claimSIQuantity) {
                nodeWriter.write("QTY");
                nodeWriter.write(delimiters.getField());
                claimSIQuantityInst.write(nodeWriter, delimiters);
            }
        }
        if(loop2110SPI != null && !loop2110SPI.isEmpty()) {
            for(Loop2110SPI loop2110SPIInst : loop2110SPI) {
                loop2110SPIInst.write(nodeWriter, delimiters);
            }
        }
    }

    public ClaimPaymentInformation getClaimPaymentInformation() {
        return claimPaymentInformation;
    }

    public Loop2100ClaimPaymentInformation setClaimPaymentInformation(ClaimPaymentInformation claimPaymentInformation) {
        this.claimPaymentInformation = claimPaymentInformation;  return this;
    }

    public List<ClaimAdjustment> getClaimAdjustment() {
        return claimAdjustment;
    }

    public Loop2100ClaimPaymentInformation setClaimAdjustment(List<ClaimAdjustment> claimAdjustment) {
        this.claimAdjustment = claimAdjustment;  return this;
    }

    public PatientName getPatientName() {
        return patientName;
    }

    public Loop2100ClaimPaymentInformation setPatientName(PatientName patientName) {
        this.patientName = patientName;  return this;
    }

    public InsuredName getInsuredName() {
        return insuredName;
    }

    public Loop2100ClaimPaymentInformation setInsuredName(InsuredName insuredName) {
        this.insuredName = insuredName;  return this;
    }

    public CorrectedPatientName getCorrectedPatientName() {
        return correctedPatientName;
    }

    public Loop2100ClaimPaymentInformation setCorrectedPatientName(CorrectedPatientName correctedPatientName) {
        this.correctedPatientName = correctedPatientName;  return this;
    }

    public ServiceProviderName getServiceProviderName() {
        return serviceProviderName;
    }

    public Loop2100ClaimPaymentInformation setServiceProviderName(ServiceProviderName serviceProviderName) {
        this.serviceProviderName = serviceProviderName;  return this;
    }

    public CrossoverCarrierName getCrossoverCarrierName() {
        return crossoverCarrierName;
    }

    public Loop2100ClaimPaymentInformation setCrossoverCarrierName(CrossoverCarrierName crossoverCarrierName) {
        this.crossoverCarrierName = crossoverCarrierName;  return this;
    }

    public CorrectedPriorityPayerName getCorrectedPriorityPayerName() {
        return correctedPriorityPayerName;
    }

    public Loop2100ClaimPaymentInformation setCorrectedPriorityPayerName(CorrectedPriorityPayerName correctedPriorityPayerName) {
        this.correctedPriorityPayerName = correctedPriorityPayerName;  return this;
    }

    public OtherSubscriberName getOtherSubscriberName() {
        return otherSubscriberName;
    }

    public Loop2100ClaimPaymentInformation setOtherSubscriberName(OtherSubscriberName otherSubscriberName) {
        this.otherSubscriberName = otherSubscriberName;  return this;
    }

    public InpatientAdjudicationInformation getInpatientAdjudicationInformation() {
        return inpatientAdjudicationInformation;
    }

    public Loop2100ClaimPaymentInformation setInpatientAdjudicationInformation(InpatientAdjudicationInformation inpatientAdjudicationInformation) {
        this.inpatientAdjudicationInformation = inpatientAdjudicationInformation;  return this;
    }

    public OutPatientAdjudicationInformation getOutPatientAdjudicationInformation() {
        return outPatientAdjudicationInformation;
    }

    public Loop2100ClaimPaymentInformation setOutPatientAdjudicationInformation(OutPatientAdjudicationInformation outPatientAdjudicationInformation) {
        this.outPatientAdjudicationInformation = outPatientAdjudicationInformation;  return this;
    }

    public List<OtherClaimRelatedIdentification> getOtherClaimRelatedIdentification() {
        return otherClaimRelatedIdentification;
    }

    public Loop2100ClaimPaymentInformation setOtherClaimRelatedIdentification(List<OtherClaimRelatedIdentification> otherClaimRelatedIdentification) {
        this.otherClaimRelatedIdentification = otherClaimRelatedIdentification;  return this;
    }

    public RenderingProviderIdentification getRenderingProviderIdentification() {
        return renderingProviderIdentification;
    }

    public Loop2100ClaimPaymentInformation setRenderingProviderIdentification(RenderingProviderIdentification renderingProviderIdentification) {
        this.renderingProviderIdentification = renderingProviderIdentification;  return this;
    }

    public List<StatementFromOrToDate> getStatementFromOrToDate() {
        return statementFromOrToDate;
    }

    public Loop2100ClaimPaymentInformation setStatementFromOrToDate(List<StatementFromOrToDate> statementFromOrToDate) {
        this.statementFromOrToDate = statementFromOrToDate;  return this;
    }

    public CoverageExpirationDate getCoverageExpirationDate() {
        return coverageExpirationDate;
    }

    public Loop2100ClaimPaymentInformation setCoverageExpirationDate(CoverageExpirationDate coverageExpirationDate) {
        this.coverageExpirationDate = coverageExpirationDate;  return this;
    }

    public ClaimRecievedDate getClaimRecievedDate() {
        return claimRecievedDate;
    }

    public Loop2100ClaimPaymentInformation setClaimRecievedDate(ClaimRecievedDate claimRecievedDate) {
        this.claimRecievedDate = claimRecievedDate;  return this;
    }

    public List<ClaimContactInformation> getClaimContactInformation() {
        return claimContactInformation;
    }

    public Loop2100ClaimPaymentInformation setClaimContactInformation(List<ClaimContactInformation> claimContactInformation) {
        this.claimContactInformation = claimContactInformation;  return this;
    }

    public List<ClaimSupplementalInformation> getClaimSupplementalInformation() {
        return claimSupplementalInformation;
    }

    public Loop2100ClaimPaymentInformation setClaimSupplementalInformation(List<ClaimSupplementalInformation> claimSupplementalInformation) {
        this.claimSupplementalInformation = claimSupplementalInformation;  return this;
    }

    public List<ClaimSIQuantity> getClaimSIQuantity() {
        return claimSIQuantity;
    }

    public Loop2100ClaimPaymentInformation setClaimSIQuantity(List<ClaimSIQuantity> claimSIQuantity) {
        this.claimSIQuantity = claimSIQuantity;  return this;
    }

    public List<Loop2110SPI> getLoop2110SPI() {
        return loop2110SPI;
    }

    public Loop2100ClaimPaymentInformation setLoop2110SPI(List<Loop2110SPI> loop2110SPI) {
        this.loop2110SPI = loop2110SPI;  return this;
    }
}