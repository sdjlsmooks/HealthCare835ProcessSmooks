/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_835;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import org.milyn.javabean.decoders.IntegerDecoder;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    
import java.io.StringWriter;    
import java.util.List;    
import java.util.ArrayList;    
import org.milyn.edisax.util.EDIUtils;    
import org.milyn.edisax.model.internal.DelimiterType;    
import java.util.Properties;    

public class TransactionSetHeader implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private String transactionSetIDCode;
    private Integer transactionSetControlNumber;
    private IntegerDecoder transactionSetControlNumberEncoder;
    private String implementationConversionReference;

    public TransactionSetHeader() {
        
        transactionSetControlNumberEncoder = new IntegerDecoder();
        Properties transactionSetControlNumberEncoderProperties = new Properties();
        transactionSetControlNumberEncoderProperties.setProperty("format", "000000000");
        transactionSetControlNumberEncoder.setConfiguration(transactionSetControlNumberEncoderProperties);
    }

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = new StringWriter();

        List<String> nodeTokens = new ArrayList<String>();

        if(transactionSetIDCode != null) {
            nodeWriter.write(delimiters.escape(transactionSetIDCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(transactionSetControlNumber != null) {
            nodeWriter.write(delimiters.escape(transactionSetControlNumberEncoder.encode(transactionSetControlNumber)));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(implementationConversionReference != null) {
            nodeWriter.write(delimiters.escape(implementationConversionReference.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeTokens.add(nodeWriter.toString());
        writer.write(EDIUtils.concatAndTruncate(nodeTokens, DelimiterType.FIELD, delimiters));
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public String getTransactionSetIDCode() {
        return transactionSetIDCode;
    }

    public TransactionSetHeader setTransactionSetIDCode(String transactionSetIDCode) {
        this.transactionSetIDCode = transactionSetIDCode;  return this;
    }

    public Integer getTransactionSetControlNumber() {
        return transactionSetControlNumber;
    }

    public TransactionSetHeader setTransactionSetControlNumber(Integer transactionSetControlNumber) {
        this.transactionSetControlNumber = transactionSetControlNumber;  return this;
    }

    public String getImplementationConversionReference() {
        return implementationConversionReference;
    }

    public TransactionSetHeader setImplementationConversionReference(String implementationConversionReference) {
        this.implementationConversionReference = implementationConversionReference;  return this;
    }
}