/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_835;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.util.Date;    
import org.milyn.javabean.decoders.DateDecoder;    
import org.milyn.javabean.decoders.IntegerDecoder;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    
import java.io.StringWriter;    
import java.util.List;    
import java.util.ArrayList;    
import org.milyn.edisax.util.EDIUtils;    
import org.milyn.edisax.model.internal.DelimiterType;    
import java.util.Properties;    

public class InterchangeControlHeader implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private String authorInfoQualifier;
    private String authorInformation;
    private String securityInfoQualifier;
    private String securityInformation;
    private String senderIDQualifier;
    private String senderID;
    private String receiverIDQualifier;
    private String receiverID;
    private Date interchangeDate;
    private DateDecoder interchangeDateEncoder;
    private Date interchangeTime;
    private DateDecoder interchangeTimeEncoder;
    private String repetitionSeparator;
    private String interchangeVersionNumber;
    private Integer interchangeControlNumber;
    private IntegerDecoder interchangeControlNumberEncoder;
    private String acknowledgementRequested;
    private String interchangeUsageIndicator;
    private String componentSeparator;

    public InterchangeControlHeader() {
        
        interchangeDateEncoder = new DateDecoder();
        Properties interchangeDateEncoderProperties = new Properties();
        interchangeDateEncoderProperties.setProperty("format", "YYMMdd");
        interchangeDateEncoder.setConfiguration(interchangeDateEncoderProperties);
        interchangeTimeEncoder = new DateDecoder();
        Properties interchangeTimeEncoderProperties = new Properties();
        interchangeTimeEncoderProperties.setProperty("format", "HHmm");
        interchangeTimeEncoder.setConfiguration(interchangeTimeEncoderProperties);
        interchangeControlNumberEncoder = new IntegerDecoder();
        Properties interchangeControlNumberEncoderProperties = new Properties();
        interchangeControlNumberEncoderProperties.setProperty("format", "000000000");
        interchangeControlNumberEncoder.setConfiguration(interchangeControlNumberEncoderProperties);
    }

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = new StringWriter();

        List<String> nodeTokens = new ArrayList<String>();

        if(authorInfoQualifier != null) {
            nodeWriter.write(delimiters.escape(authorInfoQualifier.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(authorInformation != null) {
            nodeWriter.write(delimiters.escape(authorInformation.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(securityInfoQualifier != null) {
            nodeWriter.write(delimiters.escape(securityInfoQualifier.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(securityInformation != null) {
            nodeWriter.write(delimiters.escape(securityInformation.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(senderIDQualifier != null) {
            nodeWriter.write(delimiters.escape(senderIDQualifier.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(senderID != null) {
            nodeWriter.write(delimiters.escape(senderID.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(receiverIDQualifier != null) {
            nodeWriter.write(delimiters.escape(receiverIDQualifier.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(receiverID != null) {
            nodeWriter.write(delimiters.escape(receiverID.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(interchangeDate != null) {
            nodeWriter.write(delimiters.escape(interchangeDateEncoder.encode(interchangeDate)));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(interchangeTime != null) {
            nodeWriter.write(delimiters.escape(interchangeTimeEncoder.encode(interchangeTime)));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(repetitionSeparator != null) {
            nodeWriter.write(delimiters.escape(repetitionSeparator.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(interchangeVersionNumber != null) {
            nodeWriter.write(delimiters.escape(interchangeVersionNumber.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(interchangeControlNumber != null) {
            nodeWriter.write(delimiters.escape(interchangeControlNumberEncoder.encode(interchangeControlNumber)));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(acknowledgementRequested != null) {
            nodeWriter.write(delimiters.escape(acknowledgementRequested.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(interchangeUsageIndicator != null) {
            nodeWriter.write(delimiters.escape(interchangeUsageIndicator.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(componentSeparator != null) {
            nodeWriter.write(delimiters.escape(componentSeparator.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeTokens.add(nodeWriter.toString());
        writer.write(EDIUtils.concatAndTruncate(nodeTokens, DelimiterType.FIELD, delimiters));
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public String getAuthorInfoQualifier() {
        return authorInfoQualifier;
    }

    public InterchangeControlHeader setAuthorInfoQualifier(String authorInfoQualifier) {
        this.authorInfoQualifier = authorInfoQualifier;  return this;
    }

    public String getAuthorInformation() {
        return authorInformation;
    }

    public InterchangeControlHeader setAuthorInformation(String authorInformation) {
        this.authorInformation = authorInformation;  return this;
    }

    public String getSecurityInfoQualifier() {
        return securityInfoQualifier;
    }

    public InterchangeControlHeader setSecurityInfoQualifier(String securityInfoQualifier) {
        this.securityInfoQualifier = securityInfoQualifier;  return this;
    }

    public String getSecurityInformation() {
        return securityInformation;
    }

    public InterchangeControlHeader setSecurityInformation(String securityInformation) {
        this.securityInformation = securityInformation;  return this;
    }

    public String getSenderIDQualifier() {
        return senderIDQualifier;
    }

    public InterchangeControlHeader setSenderIDQualifier(String senderIDQualifier) {
        this.senderIDQualifier = senderIDQualifier;  return this;
    }

    public String getSenderID() {
        return senderID;
    }

    public InterchangeControlHeader setSenderID(String senderID) {
        this.senderID = senderID;  return this;
    }

    public String getReceiverIDQualifier() {
        return receiverIDQualifier;
    }

    public InterchangeControlHeader setReceiverIDQualifier(String receiverIDQualifier) {
        this.receiverIDQualifier = receiverIDQualifier;  return this;
    }

    public String getReceiverID() {
        return receiverID;
    }

    public InterchangeControlHeader setReceiverID(String receiverID) {
        this.receiverID = receiverID;  return this;
    }

    public Date getInterchangeDate() {
        return interchangeDate;
    }

    public InterchangeControlHeader setInterchangeDate(Date interchangeDate) {
        this.interchangeDate = interchangeDate;  return this;
    }

    public Date getInterchangeTime() {
        return interchangeTime;
    }

    public InterchangeControlHeader setInterchangeTime(Date interchangeTime) {
        this.interchangeTime = interchangeTime;  return this;
    }

    public String getRepetitionSeparator() {
        return repetitionSeparator;
    }

    public InterchangeControlHeader setRepetitionSeparator(String repetitionSeparator) {
        this.repetitionSeparator = repetitionSeparator;  return this;
    }

    public String getInterchangeVersionNumber() {
        return interchangeVersionNumber;
    }

    public InterchangeControlHeader setInterchangeVersionNumber(String interchangeVersionNumber) {
        this.interchangeVersionNumber = interchangeVersionNumber;  return this;
    }

    public Integer getInterchangeControlNumber() {
        return interchangeControlNumber;
    }

    public InterchangeControlHeader setInterchangeControlNumber(Integer interchangeControlNumber) {
        this.interchangeControlNumber = interchangeControlNumber;  return this;
    }

    public String getAcknowledgementRequested() {
        return acknowledgementRequested;
    }

    public InterchangeControlHeader setAcknowledgementRequested(String acknowledgementRequested) {
        this.acknowledgementRequested = acknowledgementRequested;  return this;
    }

    public String getInterchangeUsageIndicator() {
        return interchangeUsageIndicator;
    }

    public InterchangeControlHeader setInterchangeUsageIndicator(String interchangeUsageIndicator) {
        this.interchangeUsageIndicator = interchangeUsageIndicator;  return this;
    }

    public String getComponentSeparator() {
        return componentSeparator;
    }

    public InterchangeControlHeader setComponentSeparator(String componentSeparator) {
        this.componentSeparator = componentSeparator;  return this;
    }
}