/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_835;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.util.Date;    
import org.milyn.javabean.decoders.DateDecoder;    
import org.milyn.javabean.decoders.IntegerDecoder;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    
import java.io.StringWriter;    
import java.util.List;    
import java.util.ArrayList;    
import org.milyn.edisax.util.EDIUtils;    
import org.milyn.edisax.model.internal.DelimiterType;    
import java.util.Properties;    

public class ProviderSummaryInformation implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private String referenceIdentification;
    private String facilityCode;
    private Date date;
    private DateDecoder dateEncoder;
    private Integer quantity;
    private IntegerDecoder quantityEncoder;
    private String monetaryAmount;

    public ProviderSummaryInformation() {
        
        dateEncoder = new DateDecoder();
        Properties dateEncoderProperties = new Properties();
        dateEncoderProperties.setProperty("format", "yyyyMMdd");
        dateEncoder.setConfiguration(dateEncoderProperties);
        quantityEncoder = new IntegerDecoder();
        Properties quantityEncoderProperties = new Properties();
        quantityEncoderProperties.setProperty("format", "000000000000000");
        quantityEncoder.setConfiguration(quantityEncoderProperties);
    }

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = new StringWriter();

        List<String> nodeTokens = new ArrayList<String>();

        if(referenceIdentification != null) {
            nodeWriter.write(delimiters.escape(referenceIdentification.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(facilityCode != null) {
            nodeWriter.write(delimiters.escape(facilityCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(date != null) {
            nodeWriter.write(delimiters.escape(dateEncoder.encode(date)));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(quantity != null) {
            nodeWriter.write(delimiters.escape(quantityEncoder.encode(quantity)));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(monetaryAmount != null) {
            nodeWriter.write(delimiters.escape(monetaryAmount.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeTokens.add(nodeWriter.toString());
        writer.write(EDIUtils.concatAndTruncate(nodeTokens, DelimiterType.FIELD, delimiters));
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public String getReferenceIdentification() {
        return referenceIdentification;
    }

    public ProviderSummaryInformation setReferenceIdentification(String referenceIdentification) {
        this.referenceIdentification = referenceIdentification;  return this;
    }

    public String getFacilityCode() {
        return facilityCode;
    }

    public ProviderSummaryInformation setFacilityCode(String facilityCode) {
        this.facilityCode = facilityCode;  return this;
    }

    public Date getDate() {
        return date;
    }

    public ProviderSummaryInformation setDate(Date date) {
        this.date = date;  return this;
    }

    public Integer getQuantity() {
        return quantity;
    }

    public ProviderSummaryInformation setQuantity(Integer quantity) {
        this.quantity = quantity;  return this;
    }

    public String getMonetaryAmount() {
        return monetaryAmount;
    }

    public ProviderSummaryInformation setMonetaryAmount(String monetaryAmount) {
        this.monetaryAmount = monetaryAmount;  return this;
    }
}