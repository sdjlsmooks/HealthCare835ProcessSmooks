/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_837;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.util.List;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    

public class Loop2000BSubscriberHierarchicalLevel implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private SubscriberHL subscriberHL;
    private List<SubscriberInfo> subscriberInfo;
    private SubPatientInformation subPatientInformation;
    private Loop2010BASubscriberName loop2010BASubscriberName;
    private Loop2010BBPayerName loop2010BBPayerName;
    private List<Loop2000CPatientHierarchicalLevel> loop2000CPatientHierarchicalLevel;

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = writer;

        if(subscriberHL != null) {
            nodeWriter.write("HLa26");
            nodeWriter.write(delimiters.getField());
            subscriberHL.write(nodeWriter, delimiters);
        }
        if(subscriberInfo != null && !subscriberInfo.isEmpty()) {
            for(SubscriberInfo subscriberInfoInst : subscriberInfo) {
                nodeWriter.write("SBRa27");
                nodeWriter.write(delimiters.getField());
                subscriberInfoInst.write(nodeWriter, delimiters);
            }
        }
        if(subPatientInformation != null) {
            nodeWriter.write("SDJLPATa28");
            nodeWriter.write(delimiters.getField());
            subPatientInformation.write(nodeWriter, delimiters);
        }
        if(loop2010BASubscriberName != null) {
            loop2010BASubscriberName.write(nodeWriter, delimiters);
        }
        if(loop2010BBPayerName != null) {
            loop2010BBPayerName.write(nodeWriter, delimiters);
        }
        if(loop2000CPatientHierarchicalLevel != null && !loop2000CPatientHierarchicalLevel.isEmpty()) {
            for(Loop2000CPatientHierarchicalLevel loop2000CPatientHierarchicalLevelInst : loop2000CPatientHierarchicalLevel) {
                loop2000CPatientHierarchicalLevelInst.write(nodeWriter, delimiters);
            }
        }
    }

    public SubscriberHL getSubscriberHL() {
        return subscriberHL;
    }

    public Loop2000BSubscriberHierarchicalLevel setSubscriberHL(SubscriberHL subscriberHL) {
        this.subscriberHL = subscriberHL;  return this;
    }

    public List<SubscriberInfo> getSubscriberInfo() {
        return subscriberInfo;
    }

    public Loop2000BSubscriberHierarchicalLevel setSubscriberInfo(List<SubscriberInfo> subscriberInfo) {
        this.subscriberInfo = subscriberInfo;  return this;
    }

    public SubPatientInformation getSubPatientInformation() {
        return subPatientInformation;
    }

    public Loop2000BSubscriberHierarchicalLevel setSubPatientInformation(SubPatientInformation subPatientInformation) {
        this.subPatientInformation = subPatientInformation;  return this;
    }

    public Loop2010BASubscriberName getLoop2010BASubscriberName() {
        return loop2010BASubscriberName;
    }

    public Loop2000BSubscriberHierarchicalLevel setLoop2010BASubscriberName(Loop2010BASubscriberName loop2010BASubscriberName) {
        this.loop2010BASubscriberName = loop2010BASubscriberName;  return this;
    }

    public Loop2010BBPayerName getLoop2010BBPayerName() {
        return loop2010BBPayerName;
    }

    public Loop2000BSubscriberHierarchicalLevel setLoop2010BBPayerName(Loop2010BBPayerName loop2010BBPayerName) {
        this.loop2010BBPayerName = loop2010BBPayerName;  return this;
    }

    public List<Loop2000CPatientHierarchicalLevel> getLoop2000CPatientHierarchicalLevel() {
        return loop2000CPatientHierarchicalLevel;
    }

    public Loop2000BSubscriberHierarchicalLevel setLoop2000CPatientHierarchicalLevel(List<Loop2000CPatientHierarchicalLevel> loop2000CPatientHierarchicalLevel) {
        this.loop2000CPatientHierarchicalLevel = loop2000CPatientHierarchicalLevel;  return this;
    }
}