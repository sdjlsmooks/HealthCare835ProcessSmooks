/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_837;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.util.Date;    
import org.milyn.javabean.decoders.DateDecoder;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    
import java.io.StringWriter;    
import java.util.List;    
import java.util.ArrayList;    
import org.milyn.edisax.util.EDIUtils;    
import org.milyn.edisax.model.internal.DelimiterType;    
import java.util.Properties;    

public class BeginHierarchicalTransaction implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private String hierarchicalStructureCode;
    private String tsPurposeCode;
    private String referenceIdentification;
    private Date date;
    private DateDecoder dateEncoder;
    private Date time;
    private DateDecoder timeEncoder;
    private String transactionTypeCode;

    public BeginHierarchicalTransaction() {
        
        dateEncoder = new DateDecoder();
        Properties dateEncoderProperties = new Properties();
        dateEncoderProperties.setProperty("format", "yyyyMMdd");
        dateEncoder.setConfiguration(dateEncoderProperties);
        timeEncoder = new DateDecoder();
        Properties timeEncoderProperties = new Properties();
        timeEncoderProperties.setProperty("format", "HHMM");
        timeEncoder.setConfiguration(timeEncoderProperties);
    }

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = new StringWriter();

        List<String> nodeTokens = new ArrayList<String>();

        if(hierarchicalStructureCode != null) {
            nodeWriter.write(delimiters.escape(hierarchicalStructureCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(tsPurposeCode != null) {
            nodeWriter.write(delimiters.escape(tsPurposeCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(referenceIdentification != null) {
            nodeWriter.write(delimiters.escape(referenceIdentification.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(date != null) {
            nodeWriter.write(delimiters.escape(dateEncoder.encode(date)));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(time != null) {
            nodeWriter.write(delimiters.escape(timeEncoder.encode(time)));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(transactionTypeCode != null) {
            nodeWriter.write(delimiters.escape(transactionTypeCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeTokens.add(nodeWriter.toString());
        writer.write(EDIUtils.concatAndTruncate(nodeTokens, DelimiterType.FIELD, delimiters));
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public String getHierarchicalStructureCode() {
        return hierarchicalStructureCode;
    }

    public BeginHierarchicalTransaction setHierarchicalStructureCode(String hierarchicalStructureCode) {
        this.hierarchicalStructureCode = hierarchicalStructureCode;  return this;
    }

    public String getTsPurposeCode() {
        return tsPurposeCode;
    }

    public BeginHierarchicalTransaction setTsPurposeCode(String tsPurposeCode) {
        this.tsPurposeCode = tsPurposeCode;  return this;
    }

    public String getReferenceIdentification() {
        return referenceIdentification;
    }

    public BeginHierarchicalTransaction setReferenceIdentification(String referenceIdentification) {
        this.referenceIdentification = referenceIdentification;  return this;
    }

    public Date getDate() {
        return date;
    }

    public BeginHierarchicalTransaction setDate(Date date) {
        this.date = date;  return this;
    }

    public Date getTime() {
        return time;
    }

    public BeginHierarchicalTransaction setTime(Date time) {
        this.time = time;  return this;
    }

    public String getTransactionTypeCode() {
        return transactionTypeCode;
    }

    public BeginHierarchicalTransaction setTransactionTypeCode(String transactionTypeCode) {
        this.transactionTypeCode = transactionTypeCode;  return this;
    }
}