/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_837;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    
import java.io.StringWriter;    
import java.util.List;    
import java.util.ArrayList;    
import org.milyn.edisax.util.EDIUtils;    
import org.milyn.edisax.model.internal.DelimiterType;    

public class TestResult implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private String measureRefIDCode;
    private String measureQualifier;
    private String measureValue;
    private String compositeUnitMeasure;
    private String rangeMinimum;
    private String rangeMax;
    private String measureSigCode;
    private String measureAttribCode;
    private String layerPositCode;
    private String measureMethod;
    private String codeListQualCode;
    private String industryCode;

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = new StringWriter();

        List<String> nodeTokens = new ArrayList<String>();

        if(measureRefIDCode != null) {
            nodeWriter.write(delimiters.escape(measureRefIDCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(measureQualifier != null) {
            nodeWriter.write(delimiters.escape(measureQualifier.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(measureValue != null) {
            nodeWriter.write(delimiters.escape(measureValue.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(compositeUnitMeasure != null) {
            nodeWriter.write(delimiters.escape(compositeUnitMeasure.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(rangeMinimum != null) {
            nodeWriter.write(delimiters.escape(rangeMinimum.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(rangeMax != null) {
            nodeWriter.write(delimiters.escape(rangeMax.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(measureSigCode != null) {
            nodeWriter.write(delimiters.escape(measureSigCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(measureAttribCode != null) {
            nodeWriter.write(delimiters.escape(measureAttribCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(layerPositCode != null) {
            nodeWriter.write(delimiters.escape(layerPositCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(measureMethod != null) {
            nodeWriter.write(delimiters.escape(measureMethod.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(codeListQualCode != null) {
            nodeWriter.write(delimiters.escape(codeListQualCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(industryCode != null) {
            nodeWriter.write(delimiters.escape(industryCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeTokens.add(nodeWriter.toString());
        writer.write(EDIUtils.concatAndTruncate(nodeTokens, DelimiterType.FIELD, delimiters));
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public String getMeasureRefIDCode() {
        return measureRefIDCode;
    }

    public TestResult setMeasureRefIDCode(String measureRefIDCode) {
        this.measureRefIDCode = measureRefIDCode;  return this;
    }

    public String getMeasureQualifier() {
        return measureQualifier;
    }

    public TestResult setMeasureQualifier(String measureQualifier) {
        this.measureQualifier = measureQualifier;  return this;
    }

    public String getMeasureValue() {
        return measureValue;
    }

    public TestResult setMeasureValue(String measureValue) {
        this.measureValue = measureValue;  return this;
    }

    public String getCompositeUnitMeasure() {
        return compositeUnitMeasure;
    }

    public TestResult setCompositeUnitMeasure(String compositeUnitMeasure) {
        this.compositeUnitMeasure = compositeUnitMeasure;  return this;
    }

    public String getRangeMinimum() {
        return rangeMinimum;
    }

    public TestResult setRangeMinimum(String rangeMinimum) {
        this.rangeMinimum = rangeMinimum;  return this;
    }

    public String getRangeMax() {
        return rangeMax;
    }

    public TestResult setRangeMax(String rangeMax) {
        this.rangeMax = rangeMax;  return this;
    }

    public String getMeasureSigCode() {
        return measureSigCode;
    }

    public TestResult setMeasureSigCode(String measureSigCode) {
        this.measureSigCode = measureSigCode;  return this;
    }

    public String getMeasureAttribCode() {
        return measureAttribCode;
    }

    public TestResult setMeasureAttribCode(String measureAttribCode) {
        this.measureAttribCode = measureAttribCode;  return this;
    }

    public String getLayerPositCode() {
        return layerPositCode;
    }

    public TestResult setLayerPositCode(String layerPositCode) {
        this.layerPositCode = layerPositCode;  return this;
    }

    public String getMeasureMethod() {
        return measureMethod;
    }

    public TestResult setMeasureMethod(String measureMethod) {
        this.measureMethod = measureMethod;  return this;
    }

    public String getCodeListQualCode() {
        return codeListQualCode;
    }

    public TestResult setCodeListQualCode(String codeListQualCode) {
        this.codeListQualCode = codeListQualCode;  return this;
    }

    public String getIndustryCode() {
        return industryCode;
    }

    public TestResult setIndustryCode(String industryCode) {
        this.industryCode = industryCode;  return this;
    }
}