/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_837;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.util.List;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    

public class Loop2400ServiceLineNumber implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private ServiceLineNumber serviceLineNumber;
    private ProfessionalService professionalService;
    private DurableMedicalEquipmentService durableMedicalEquipmentService;
    private List<LineSuppInfo> lineSuppInfo;
    private DurMedCertNecessity durMedCertNecessity;
    private SlnAmbulanceTransportInformation slnAmbulanceTransportInformation;
    private DurMedEquipCert durMedEquipCert;
    private List<AmbulanceCertification> ambulanceCertification;
    private HospiceEmployeeIndicator hospiceEmployeeIndicator;
    private CondIndicatorDurMedEquip condIndicatorDurMedEquip;
    private ServiceDate serviceDate;
    private PrescriptionDate prescriptionDate;
    private CertificationDate certificationDate;
    private BeginTherapyDate beginTherapyDate;
    private LastCertificationDate lastCertificationDate;
    private LastSeenDate lastSeenDate;
    private List<TestDate> testDate;
    private ShipDate shipDate;
    private LastXRay lastXRay;
    private InitialTreatmentDate initialTreatmentDate;
    private List<AmbulancePatientCount> ambulancePatientCount;
    private List<ObsAnesthUnits> obsAnesthUnits;
    private List<TestResult> testResult;
    private ContractInformation contractInformation;
    private RepriceLIRefNumber repriceLIRefNumber;
    private AdjRepriceLIRefNumber adjRepriceLIRefNumber;
    private PriorAuth priorAuth;
    private LiControlNumber liControlNumber;
    private MammographyCertNumber mammographyCertNumber;
    private CliaNumber cliaNumber;
    private RefCLIAFacility refCLIAFacility;
    private ImmunBatchNumber immunBatchNumber;
    private List<ReferralNumber> referralNumber;
    private SalesTaxAmount salesTaxAmount;
    private PostageClaimedAmount postageClaimedAmount;
    private List<FileInformation> fileInformation;
    private LineNote lineNote;
    private TpoNotes tpoNotes;
    private PurchaseServInfo purchaseServInfo;
    private LinePriceRePriceInfo linePriceRePriceInfo;
    private Loop2410DrugIdentification loop2410DrugIdentification;
    private Loop2420ARenderingProviderName loop2420ARenderingProviderName;
    private Loop2420BPurchasedServiceProviderName loop2420BPurchasedServiceProviderName;
    private LP2420CServiceFacilityLocationName lP2420CServiceFacilityLocationName;
    private Loop2420DSupervisingProviderName loop2420DSupervisingProviderName;
    private Loop2420EOrderingProviderName loop2420EOrderingProviderName;
    private List<Loop2420FReferringProviderName> loop2420FReferringProviderName;
    private Loop2400GAmbulancePickupLocation loop2400GAmbulancePickupLocation;
    private Loop2400HAmbulanceDropOffLocation loop2400HAmbulanceDropOffLocation;
    private List<Loop2430LineAdjusticationInfo> loop2430LineAdjusticationInfo;
    private List<FormIdentificationCode> formIdentificationCode;

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = writer;

        if(serviceLineNumber != null) {
            nodeWriter.write("LX");
            nodeWriter.write(delimiters.getField());
            serviceLineNumber.write(nodeWriter, delimiters);
        }
        if(professionalService != null) {
            nodeWriter.write("SV1");
            nodeWriter.write(delimiters.getField());
            professionalService.write(nodeWriter, delimiters);
        }
        if(durableMedicalEquipmentService != null) {
            nodeWriter.write("SV5");
            nodeWriter.write(delimiters.getField());
            durableMedicalEquipmentService.write(nodeWriter, delimiters);
        }
        if(lineSuppInfo != null && !lineSuppInfo.isEmpty()) {
            for(LineSuppInfo lineSuppInfoInst : lineSuppInfo) {
                nodeWriter.write("PWK1");
                nodeWriter.write(delimiters.getField());
                lineSuppInfoInst.write(nodeWriter, delimiters);
            }
        }
        if(durMedCertNecessity != null) {
            nodeWriter.write("PWK2");
            nodeWriter.write(delimiters.getField());
            durMedCertNecessity.write(nodeWriter, delimiters);
        }
        if(slnAmbulanceTransportInformation != null) {
            nodeWriter.write("CR1");
            nodeWriter.write(delimiters.getField());
            slnAmbulanceTransportInformation.write(nodeWriter, delimiters);
        }
        if(durMedEquipCert != null) {
            nodeWriter.write("CR3");
            nodeWriter.write(delimiters.getField());
            durMedEquipCert.write(nodeWriter, delimiters);
        }
        if(ambulanceCertification != null && !ambulanceCertification.isEmpty()) {
            for(AmbulanceCertification ambulanceCertificationInst : ambulanceCertification) {
                nodeWriter.write("CRC.07.+");
                nodeWriter.write(delimiters.getField());
                ambulanceCertificationInst.write(nodeWriter, delimiters);
            }
        }
        if(hospiceEmployeeIndicator != null) {
            nodeWriter.write("CRC.70.+");
            nodeWriter.write(delimiters.getField());
            hospiceEmployeeIndicator.write(nodeWriter, delimiters);
        }
        if(condIndicatorDurMedEquip != null) {
            nodeWriter.write("CRC.09.+");
            nodeWriter.write(delimiters.getField());
            condIndicatorDurMedEquip.write(nodeWriter, delimiters);
        }
        if(serviceDate != null) {
            nodeWriter.write("DTP");
            nodeWriter.write(delimiters.getField());
            serviceDate.write(nodeWriter, delimiters);
        }
        if(prescriptionDate != null) {
            nodeWriter.write("DTP");
            nodeWriter.write(delimiters.getField());
            prescriptionDate.write(nodeWriter, delimiters);
        }
        if(certificationDate != null) {
            nodeWriter.write("DTP");
            nodeWriter.write(delimiters.getField());
            certificationDate.write(nodeWriter, delimiters);
        }
        if(beginTherapyDate != null) {
            nodeWriter.write("DTP");
            nodeWriter.write(delimiters.getField());
            beginTherapyDate.write(nodeWriter, delimiters);
        }
        if(lastCertificationDate != null) {
            nodeWriter.write("DTP");
            nodeWriter.write(delimiters.getField());
            lastCertificationDate.write(nodeWriter, delimiters);
        }
        if(lastSeenDate != null) {
            nodeWriter.write("DTP");
            nodeWriter.write(delimiters.getField());
            lastSeenDate.write(nodeWriter, delimiters);
        }
        if(testDate != null && !testDate.isEmpty()) {
            for(TestDate testDateInst : testDate) {
                nodeWriter.write("DTP");
                nodeWriter.write(delimiters.getField());
                testDateInst.write(nodeWriter, delimiters);
            }
        }
        if(shipDate != null) {
            nodeWriter.write("DTP");
            nodeWriter.write(delimiters.getField());
            shipDate.write(nodeWriter, delimiters);
        }
        if(lastXRay != null) {
            nodeWriter.write("DTP");
            nodeWriter.write(delimiters.getField());
            lastXRay.write(nodeWriter, delimiters);
        }
        if(initialTreatmentDate != null) {
            nodeWriter.write("DTP");
            nodeWriter.write(delimiters.getField());
            initialTreatmentDate.write(nodeWriter, delimiters);
        }
        if(ambulancePatientCount != null && !ambulancePatientCount.isEmpty()) {
            for(AmbulancePatientCount ambulancePatientCountInst : ambulancePatientCount) {
                nodeWriter.write("QTY");
                nodeWriter.write(delimiters.getField());
                ambulancePatientCountInst.write(nodeWriter, delimiters);
            }
        }
        if(obsAnesthUnits != null && !obsAnesthUnits.isEmpty()) {
            for(ObsAnesthUnits obsAnesthUnitsInst : obsAnesthUnits) {
                nodeWriter.write("QTY.FL+");
                nodeWriter.write(delimiters.getField());
                obsAnesthUnitsInst.write(nodeWriter, delimiters);
            }
        }
        if(testResult != null && !testResult.isEmpty()) {
            for(TestResult testResultInst : testResult) {
                nodeWriter.write("MEA");
                nodeWriter.write(delimiters.getField());
                testResultInst.write(nodeWriter, delimiters);
            }
        }
        if(contractInformation != null) {
            nodeWriter.write("CN1");
            nodeWriter.write(delimiters.getField());
            contractInformation.write(nodeWriter, delimiters);
        }
        if(repriceLIRefNumber != null) {
            nodeWriter.write("SDJLREF14");
            nodeWriter.write(delimiters.getField());
            repriceLIRefNumber.write(nodeWriter, delimiters);
        }
        if(adjRepriceLIRefNumber != null) {
            nodeWriter.write("SDJLREF15");
            nodeWriter.write(delimiters.getField());
            adjRepriceLIRefNumber.write(nodeWriter, delimiters);
        }
        if(priorAuth != null) {
            nodeWriter.write("SDJLREF16");
            nodeWriter.write(delimiters.getField());
            priorAuth.write(nodeWriter, delimiters);
        }
        if(liControlNumber != null) {
            nodeWriter.write("SDJLREF17b");
            nodeWriter.write(delimiters.getField());
            liControlNumber.write(nodeWriter, delimiters);
        }
        if(mammographyCertNumber != null) {
            nodeWriter.write("SDJLREF18");
            nodeWriter.write(delimiters.getField());
            mammographyCertNumber.write(nodeWriter, delimiters);
        }
        if(cliaNumber != null) {
            nodeWriter.write("SDJLREF19");
            nodeWriter.write(delimiters.getField());
            cliaNumber.write(nodeWriter, delimiters);
        }
        if(refCLIAFacility != null) {
            nodeWriter.write("SDJLREF20");
            nodeWriter.write(delimiters.getField());
            refCLIAFacility.write(nodeWriter, delimiters);
        }
        if(immunBatchNumber != null) {
            nodeWriter.write("SDJLREF21");
            nodeWriter.write(delimiters.getField());
            immunBatchNumber.write(nodeWriter, delimiters);
        }
        if(referralNumber != null && !referralNumber.isEmpty()) {
            for(ReferralNumber referralNumberInst : referralNumber) {
                nodeWriter.write("SDJLREF21");
                nodeWriter.write(delimiters.getField());
                referralNumberInst.write(nodeWriter, delimiters);
            }
        }
        if(salesTaxAmount != null) {
            nodeWriter.write("AMT.T.*");
            nodeWriter.write(delimiters.getField());
            salesTaxAmount.write(nodeWriter, delimiters);
        }
        if(postageClaimedAmount != null) {
            nodeWriter.write("AMT.F4.*");
            nodeWriter.write(delimiters.getField());
            postageClaimedAmount.write(nodeWriter, delimiters);
        }
        if(fileInformation != null && !fileInformation.isEmpty()) {
            for(FileInformation fileInformationInst : fileInformation) {
                nodeWriter.write("K3");
                nodeWriter.write(delimiters.getField());
                fileInformationInst.write(nodeWriter, delimiters);
            }
        }
        if(lineNote != null) {
            nodeWriter.write("NTE.(ADD|DCP).*");
            nodeWriter.write(delimiters.getField());
            lineNote.write(nodeWriter, delimiters);
        }
        if(tpoNotes != null) {
            nodeWriter.write("NTE.TPO.*");
            nodeWriter.write(delimiters.getField());
            tpoNotes.write(nodeWriter, delimiters);
        }
        if(purchaseServInfo != null) {
            nodeWriter.write("PS1");
            nodeWriter.write(delimiters.getField());
            purchaseServInfo.write(nodeWriter, delimiters);
        }
        if(linePriceRePriceInfo != null) {
            nodeWriter.write("HCP");
            nodeWriter.write(delimiters.getField());
            linePriceRePriceInfo.write(nodeWriter, delimiters);
        }
        if(loop2410DrugIdentification != null) {
            loop2410DrugIdentification.write(nodeWriter, delimiters);
        }
        if(loop2420ARenderingProviderName != null) {
            loop2420ARenderingProviderName.write(nodeWriter, delimiters);
        }
        if(loop2420BPurchasedServiceProviderName != null) {
            loop2420BPurchasedServiceProviderName.write(nodeWriter, delimiters);
        }
        if(lP2420CServiceFacilityLocationName != null) {
            lP2420CServiceFacilityLocationName.write(nodeWriter, delimiters);
        }
        if(loop2420DSupervisingProviderName != null) {
            loop2420DSupervisingProviderName.write(nodeWriter, delimiters);
        }
        if(loop2420EOrderingProviderName != null) {
            loop2420EOrderingProviderName.write(nodeWriter, delimiters);
        }
        if(loop2420FReferringProviderName != null && !loop2420FReferringProviderName.isEmpty()) {
            for(Loop2420FReferringProviderName loop2420FReferringProviderNameInst : loop2420FReferringProviderName) {
                loop2420FReferringProviderNameInst.write(nodeWriter, delimiters);
            }
        }
        if(loop2400GAmbulancePickupLocation != null) {
            loop2400GAmbulancePickupLocation.write(nodeWriter, delimiters);
        }
        if(loop2400HAmbulanceDropOffLocation != null) {
            loop2400HAmbulanceDropOffLocation.write(nodeWriter, delimiters);
        }
        if(loop2430LineAdjusticationInfo != null && !loop2430LineAdjusticationInfo.isEmpty()) {
            for(Loop2430LineAdjusticationInfo loop2430LineAdjusticationInfoInst : loop2430LineAdjusticationInfo) {
                loop2430LineAdjusticationInfoInst.write(nodeWriter, delimiters);
            }
        }
        if(formIdentificationCode != null && !formIdentificationCode.isEmpty()) {
            for(FormIdentificationCode formIdentificationCodeInst : formIdentificationCode) {
                formIdentificationCodeInst.write(nodeWriter, delimiters);
            }
        }
    }

    public ServiceLineNumber getServiceLineNumber() {
        return serviceLineNumber;
    }

    public Loop2400ServiceLineNumber setServiceLineNumber(ServiceLineNumber serviceLineNumber) {
        this.serviceLineNumber = serviceLineNumber;  return this;
    }

    public ProfessionalService getProfessionalService() {
        return professionalService;
    }

    public Loop2400ServiceLineNumber setProfessionalService(ProfessionalService professionalService) {
        this.professionalService = professionalService;  return this;
    }

    public DurableMedicalEquipmentService getDurableMedicalEquipmentService() {
        return durableMedicalEquipmentService;
    }

    public Loop2400ServiceLineNumber setDurableMedicalEquipmentService(DurableMedicalEquipmentService durableMedicalEquipmentService) {
        this.durableMedicalEquipmentService = durableMedicalEquipmentService;  return this;
    }

    public List<LineSuppInfo> getLineSuppInfo() {
        return lineSuppInfo;
    }

    public Loop2400ServiceLineNumber setLineSuppInfo(List<LineSuppInfo> lineSuppInfo) {
        this.lineSuppInfo = lineSuppInfo;  return this;
    }

    public DurMedCertNecessity getDurMedCertNecessity() {
        return durMedCertNecessity;
    }

    public Loop2400ServiceLineNumber setDurMedCertNecessity(DurMedCertNecessity durMedCertNecessity) {
        this.durMedCertNecessity = durMedCertNecessity;  return this;
    }

    public SlnAmbulanceTransportInformation getSlnAmbulanceTransportInformation() {
        return slnAmbulanceTransportInformation;
    }

    public Loop2400ServiceLineNumber setSlnAmbulanceTransportInformation(SlnAmbulanceTransportInformation slnAmbulanceTransportInformation) {
        this.slnAmbulanceTransportInformation = slnAmbulanceTransportInformation;  return this;
    }

    public DurMedEquipCert getDurMedEquipCert() {
        return durMedEquipCert;
    }

    public Loop2400ServiceLineNumber setDurMedEquipCert(DurMedEquipCert durMedEquipCert) {
        this.durMedEquipCert = durMedEquipCert;  return this;
    }

    public List<AmbulanceCertification> getAmbulanceCertification() {
        return ambulanceCertification;
    }

    public Loop2400ServiceLineNumber setAmbulanceCertification(List<AmbulanceCertification> ambulanceCertification) {
        this.ambulanceCertification = ambulanceCertification;  return this;
    }

    public HospiceEmployeeIndicator getHospiceEmployeeIndicator() {
        return hospiceEmployeeIndicator;
    }

    public Loop2400ServiceLineNumber setHospiceEmployeeIndicator(HospiceEmployeeIndicator hospiceEmployeeIndicator) {
        this.hospiceEmployeeIndicator = hospiceEmployeeIndicator;  return this;
    }

    public CondIndicatorDurMedEquip getCondIndicatorDurMedEquip() {
        return condIndicatorDurMedEquip;
    }

    public Loop2400ServiceLineNumber setCondIndicatorDurMedEquip(CondIndicatorDurMedEquip condIndicatorDurMedEquip) {
        this.condIndicatorDurMedEquip = condIndicatorDurMedEquip;  return this;
    }

    public ServiceDate getServiceDate() {
        return serviceDate;
    }

    public Loop2400ServiceLineNumber setServiceDate(ServiceDate serviceDate) {
        this.serviceDate = serviceDate;  return this;
    }

    public PrescriptionDate getPrescriptionDate() {
        return prescriptionDate;
    }

    public Loop2400ServiceLineNumber setPrescriptionDate(PrescriptionDate prescriptionDate) {
        this.prescriptionDate = prescriptionDate;  return this;
    }

    public CertificationDate getCertificationDate() {
        return certificationDate;
    }

    public Loop2400ServiceLineNumber setCertificationDate(CertificationDate certificationDate) {
        this.certificationDate = certificationDate;  return this;
    }

    public BeginTherapyDate getBeginTherapyDate() {
        return beginTherapyDate;
    }

    public Loop2400ServiceLineNumber setBeginTherapyDate(BeginTherapyDate beginTherapyDate) {
        this.beginTherapyDate = beginTherapyDate;  return this;
    }

    public LastCertificationDate getLastCertificationDate() {
        return lastCertificationDate;
    }

    public Loop2400ServiceLineNumber setLastCertificationDate(LastCertificationDate lastCertificationDate) {
        this.lastCertificationDate = lastCertificationDate;  return this;
    }

    public LastSeenDate getLastSeenDate() {
        return lastSeenDate;
    }

    public Loop2400ServiceLineNumber setLastSeenDate(LastSeenDate lastSeenDate) {
        this.lastSeenDate = lastSeenDate;  return this;
    }

    public List<TestDate> getTestDate() {
        return testDate;
    }

    public Loop2400ServiceLineNumber setTestDate(List<TestDate> testDate) {
        this.testDate = testDate;  return this;
    }

    public ShipDate getShipDate() {
        return shipDate;
    }

    public Loop2400ServiceLineNumber setShipDate(ShipDate shipDate) {
        this.shipDate = shipDate;  return this;
    }

    public LastXRay getLastXRay() {
        return lastXRay;
    }

    public Loop2400ServiceLineNumber setLastXRay(LastXRay lastXRay) {
        this.lastXRay = lastXRay;  return this;
    }

    public InitialTreatmentDate getInitialTreatmentDate() {
        return initialTreatmentDate;
    }

    public Loop2400ServiceLineNumber setInitialTreatmentDate(InitialTreatmentDate initialTreatmentDate) {
        this.initialTreatmentDate = initialTreatmentDate;  return this;
    }

    public List<AmbulancePatientCount> getAmbulancePatientCount() {
        return ambulancePatientCount;
    }

    public Loop2400ServiceLineNumber setAmbulancePatientCount(List<AmbulancePatientCount> ambulancePatientCount) {
        this.ambulancePatientCount = ambulancePatientCount;  return this;
    }

    public List<ObsAnesthUnits> getObsAnesthUnits() {
        return obsAnesthUnits;
    }

    public Loop2400ServiceLineNumber setObsAnesthUnits(List<ObsAnesthUnits> obsAnesthUnits) {
        this.obsAnesthUnits = obsAnesthUnits;  return this;
    }

    public List<TestResult> getTestResult() {
        return testResult;
    }

    public Loop2400ServiceLineNumber setTestResult(List<TestResult> testResult) {
        this.testResult = testResult;  return this;
    }

    public ContractInformation getContractInformation() {
        return contractInformation;
    }

    public Loop2400ServiceLineNumber setContractInformation(ContractInformation contractInformation) {
        this.contractInformation = contractInformation;  return this;
    }

    public RepriceLIRefNumber getRepriceLIRefNumber() {
        return repriceLIRefNumber;
    }

    public Loop2400ServiceLineNumber setRepriceLIRefNumber(RepriceLIRefNumber repriceLIRefNumber) {
        this.repriceLIRefNumber = repriceLIRefNumber;  return this;
    }

    public AdjRepriceLIRefNumber getAdjRepriceLIRefNumber() {
        return adjRepriceLIRefNumber;
    }

    public Loop2400ServiceLineNumber setAdjRepriceLIRefNumber(AdjRepriceLIRefNumber adjRepriceLIRefNumber) {
        this.adjRepriceLIRefNumber = adjRepriceLIRefNumber;  return this;
    }

    public PriorAuth getPriorAuth() {
        return priorAuth;
    }

    public Loop2400ServiceLineNumber setPriorAuth(PriorAuth priorAuth) {
        this.priorAuth = priorAuth;  return this;
    }

    public LiControlNumber getLiControlNumber() {
        return liControlNumber;
    }

    public Loop2400ServiceLineNumber setLiControlNumber(LiControlNumber liControlNumber) {
        this.liControlNumber = liControlNumber;  return this;
    }

    public MammographyCertNumber getMammographyCertNumber() {
        return mammographyCertNumber;
    }

    public Loop2400ServiceLineNumber setMammographyCertNumber(MammographyCertNumber mammographyCertNumber) {
        this.mammographyCertNumber = mammographyCertNumber;  return this;
    }

    public CliaNumber getCliaNumber() {
        return cliaNumber;
    }

    public Loop2400ServiceLineNumber setCliaNumber(CliaNumber cliaNumber) {
        this.cliaNumber = cliaNumber;  return this;
    }

    public RefCLIAFacility getRefCLIAFacility() {
        return refCLIAFacility;
    }

    public Loop2400ServiceLineNumber setRefCLIAFacility(RefCLIAFacility refCLIAFacility) {
        this.refCLIAFacility = refCLIAFacility;  return this;
    }

    public ImmunBatchNumber getImmunBatchNumber() {
        return immunBatchNumber;
    }

    public Loop2400ServiceLineNumber setImmunBatchNumber(ImmunBatchNumber immunBatchNumber) {
        this.immunBatchNumber = immunBatchNumber;  return this;
    }

    public List<ReferralNumber> getReferralNumber() {
        return referralNumber;
    }

    public Loop2400ServiceLineNumber setReferralNumber(List<ReferralNumber> referralNumber) {
        this.referralNumber = referralNumber;  return this;
    }

    public SalesTaxAmount getSalesTaxAmount() {
        return salesTaxAmount;
    }

    public Loop2400ServiceLineNumber setSalesTaxAmount(SalesTaxAmount salesTaxAmount) {
        this.salesTaxAmount = salesTaxAmount;  return this;
    }

    public PostageClaimedAmount getPostageClaimedAmount() {
        return postageClaimedAmount;
    }

    public Loop2400ServiceLineNumber setPostageClaimedAmount(PostageClaimedAmount postageClaimedAmount) {
        this.postageClaimedAmount = postageClaimedAmount;  return this;
    }

    public List<FileInformation> getFileInformation() {
        return fileInformation;
    }

    public Loop2400ServiceLineNumber setFileInformation(List<FileInformation> fileInformation) {
        this.fileInformation = fileInformation;  return this;
    }

    public LineNote getLineNote() {
        return lineNote;
    }

    public Loop2400ServiceLineNumber setLineNote(LineNote lineNote) {
        this.lineNote = lineNote;  return this;
    }

    public TpoNotes getTpoNotes() {
        return tpoNotes;
    }

    public Loop2400ServiceLineNumber setTpoNotes(TpoNotes tpoNotes) {
        this.tpoNotes = tpoNotes;  return this;
    }

    public PurchaseServInfo getPurchaseServInfo() {
        return purchaseServInfo;
    }

    public Loop2400ServiceLineNumber setPurchaseServInfo(PurchaseServInfo purchaseServInfo) {
        this.purchaseServInfo = purchaseServInfo;  return this;
    }

    public LinePriceRePriceInfo getLinePriceRePriceInfo() {
        return linePriceRePriceInfo;
    }

    public Loop2400ServiceLineNumber setLinePriceRePriceInfo(LinePriceRePriceInfo linePriceRePriceInfo) {
        this.linePriceRePriceInfo = linePriceRePriceInfo;  return this;
    }

    public Loop2410DrugIdentification getLoop2410DrugIdentification() {
        return loop2410DrugIdentification;
    }

    public Loop2400ServiceLineNumber setLoop2410DrugIdentification(Loop2410DrugIdentification loop2410DrugIdentification) {
        this.loop2410DrugIdentification = loop2410DrugIdentification;  return this;
    }

    public Loop2420ARenderingProviderName getLoop2420ARenderingProviderName() {
        return loop2420ARenderingProviderName;
    }

    public Loop2400ServiceLineNumber setLoop2420ARenderingProviderName(Loop2420ARenderingProviderName loop2420ARenderingProviderName) {
        this.loop2420ARenderingProviderName = loop2420ARenderingProviderName;  return this;
    }

    public Loop2420BPurchasedServiceProviderName getLoop2420BPurchasedServiceProviderName() {
        return loop2420BPurchasedServiceProviderName;
    }

    public Loop2400ServiceLineNumber setLoop2420BPurchasedServiceProviderName(Loop2420BPurchasedServiceProviderName loop2420BPurchasedServiceProviderName) {
        this.loop2420BPurchasedServiceProviderName = loop2420BPurchasedServiceProviderName;  return this;
    }

    public LP2420CServiceFacilityLocationName getLP2420CServiceFacilityLocationName() {
        return lP2420CServiceFacilityLocationName;
    }

    public Loop2400ServiceLineNumber setLP2420CServiceFacilityLocationName(LP2420CServiceFacilityLocationName lP2420CServiceFacilityLocationName) {
        this.lP2420CServiceFacilityLocationName = lP2420CServiceFacilityLocationName;  return this;
    }

    public Loop2420DSupervisingProviderName getLoop2420DSupervisingProviderName() {
        return loop2420DSupervisingProviderName;
    }

    public Loop2400ServiceLineNumber setLoop2420DSupervisingProviderName(Loop2420DSupervisingProviderName loop2420DSupervisingProviderName) {
        this.loop2420DSupervisingProviderName = loop2420DSupervisingProviderName;  return this;
    }

    public Loop2420EOrderingProviderName getLoop2420EOrderingProviderName() {
        return loop2420EOrderingProviderName;
    }

    public Loop2400ServiceLineNumber setLoop2420EOrderingProviderName(Loop2420EOrderingProviderName loop2420EOrderingProviderName) {
        this.loop2420EOrderingProviderName = loop2420EOrderingProviderName;  return this;
    }

    public List<Loop2420FReferringProviderName> getLoop2420FReferringProviderName() {
        return loop2420FReferringProviderName;
    }

    public Loop2400ServiceLineNumber setLoop2420FReferringProviderName(List<Loop2420FReferringProviderName> loop2420FReferringProviderName) {
        this.loop2420FReferringProviderName = loop2420FReferringProviderName;  return this;
    }

    public Loop2400GAmbulancePickupLocation getLoop2400GAmbulancePickupLocation() {
        return loop2400GAmbulancePickupLocation;
    }

    public Loop2400ServiceLineNumber setLoop2400GAmbulancePickupLocation(Loop2400GAmbulancePickupLocation loop2400GAmbulancePickupLocation) {
        this.loop2400GAmbulancePickupLocation = loop2400GAmbulancePickupLocation;  return this;
    }

    public Loop2400HAmbulanceDropOffLocation getLoop2400HAmbulanceDropOffLocation() {
        return loop2400HAmbulanceDropOffLocation;
    }

    public Loop2400ServiceLineNumber setLoop2400HAmbulanceDropOffLocation(Loop2400HAmbulanceDropOffLocation loop2400HAmbulanceDropOffLocation) {
        this.loop2400HAmbulanceDropOffLocation = loop2400HAmbulanceDropOffLocation;  return this;
    }

    public List<Loop2430LineAdjusticationInfo> getLoop2430LineAdjusticationInfo() {
        return loop2430LineAdjusticationInfo;
    }

    public Loop2400ServiceLineNumber setLoop2430LineAdjusticationInfo(List<Loop2430LineAdjusticationInfo> loop2430LineAdjusticationInfo) {
        this.loop2430LineAdjusticationInfo = loop2430LineAdjusticationInfo;  return this;
    }

    public List<FormIdentificationCode> getFormIdentificationCode() {
        return formIdentificationCode;
    }

    public Loop2400ServiceLineNumber setFormIdentificationCode(List<FormIdentificationCode> formIdentificationCode) {
        this.formIdentificationCode = formIdentificationCode;  return this;
    }
}