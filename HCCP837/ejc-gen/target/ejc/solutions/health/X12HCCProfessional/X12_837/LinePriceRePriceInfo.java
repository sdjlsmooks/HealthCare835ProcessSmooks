/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_837;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import org.milyn.javabean.decoders.DoubleDecoder;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    
import java.io.StringWriter;    
import java.util.List;    
import java.util.ArrayList;    
import org.milyn.edisax.util.EDIUtils;    
import org.milyn.edisax.model.internal.DelimiterType;    

public class LinePriceRePriceInfo implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private String pricingMethodology;
    private String alllowedAmount;
    private String savingsAmount;
    private String referenceID;
    private String rate;
    private String referenceID2;
    private String monetaryAmount;
    private String productServiceID;
    private String prodServIDQualifier;
    private String prodServiceID2;
    private String unitBasisMeasureCode;
    private Double quantity;
    private DoubleDecoder quantityEncoder;
    private String rejectReasonCode;
    private String policyCompCode;
    private String exceptionCode;

    public LinePriceRePriceInfo() {
        
        quantityEncoder = new DoubleDecoder();
    }

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = new StringWriter();

        List<String> nodeTokens = new ArrayList<String>();

        if(pricingMethodology != null) {
            nodeWriter.write(delimiters.escape(pricingMethodology.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(alllowedAmount != null) {
            nodeWriter.write(delimiters.escape(alllowedAmount.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(savingsAmount != null) {
            nodeWriter.write(delimiters.escape(savingsAmount.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(referenceID != null) {
            nodeWriter.write(delimiters.escape(referenceID.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(rate != null) {
            nodeWriter.write(delimiters.escape(rate.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(referenceID2 != null) {
            nodeWriter.write(delimiters.escape(referenceID2.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(monetaryAmount != null) {
            nodeWriter.write(delimiters.escape(monetaryAmount.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(productServiceID != null) {
            nodeWriter.write(delimiters.escape(productServiceID.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(prodServIDQualifier != null) {
            nodeWriter.write(delimiters.escape(prodServIDQualifier.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(prodServiceID2 != null) {
            nodeWriter.write(delimiters.escape(prodServiceID2.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(unitBasisMeasureCode != null) {
            nodeWriter.write(delimiters.escape(unitBasisMeasureCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(quantity != null) {
            nodeWriter.write(delimiters.escape(quantityEncoder.encode(quantity)));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(rejectReasonCode != null) {
            nodeWriter.write(delimiters.escape(rejectReasonCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(policyCompCode != null) {
            nodeWriter.write(delimiters.escape(policyCompCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(exceptionCode != null) {
            nodeWriter.write(delimiters.escape(exceptionCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeTokens.add(nodeWriter.toString());
        writer.write(EDIUtils.concatAndTruncate(nodeTokens, DelimiterType.FIELD, delimiters));
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public String getPricingMethodology() {
        return pricingMethodology;
    }

    public LinePriceRePriceInfo setPricingMethodology(String pricingMethodology) {
        this.pricingMethodology = pricingMethodology;  return this;
    }

    public String getAlllowedAmount() {
        return alllowedAmount;
    }

    public LinePriceRePriceInfo setAlllowedAmount(String alllowedAmount) {
        this.alllowedAmount = alllowedAmount;  return this;
    }

    public String getSavingsAmount() {
        return savingsAmount;
    }

    public LinePriceRePriceInfo setSavingsAmount(String savingsAmount) {
        this.savingsAmount = savingsAmount;  return this;
    }

    public String getReferenceID() {
        return referenceID;
    }

    public LinePriceRePriceInfo setReferenceID(String referenceID) {
        this.referenceID = referenceID;  return this;
    }

    public String getRate() {
        return rate;
    }

    public LinePriceRePriceInfo setRate(String rate) {
        this.rate = rate;  return this;
    }

    public String getReferenceID2() {
        return referenceID2;
    }

    public LinePriceRePriceInfo setReferenceID2(String referenceID2) {
        this.referenceID2 = referenceID2;  return this;
    }

    public String getMonetaryAmount() {
        return monetaryAmount;
    }

    public LinePriceRePriceInfo setMonetaryAmount(String monetaryAmount) {
        this.monetaryAmount = monetaryAmount;  return this;
    }

    public String getProductServiceID() {
        return productServiceID;
    }

    public LinePriceRePriceInfo setProductServiceID(String productServiceID) {
        this.productServiceID = productServiceID;  return this;
    }

    public String getProdServIDQualifier() {
        return prodServIDQualifier;
    }

    public LinePriceRePriceInfo setProdServIDQualifier(String prodServIDQualifier) {
        this.prodServIDQualifier = prodServIDQualifier;  return this;
    }

    public String getProdServiceID2() {
        return prodServiceID2;
    }

    public LinePriceRePriceInfo setProdServiceID2(String prodServiceID2) {
        this.prodServiceID2 = prodServiceID2;  return this;
    }

    public String getUnitBasisMeasureCode() {
        return unitBasisMeasureCode;
    }

    public LinePriceRePriceInfo setUnitBasisMeasureCode(String unitBasisMeasureCode) {
        this.unitBasisMeasureCode = unitBasisMeasureCode;  return this;
    }

    public Double getQuantity() {
        return quantity;
    }

    public LinePriceRePriceInfo setQuantity(Double quantity) {
        this.quantity = quantity;  return this;
    }

    public String getRejectReasonCode() {
        return rejectReasonCode;
    }

    public LinePriceRePriceInfo setRejectReasonCode(String rejectReasonCode) {
        this.rejectReasonCode = rejectReasonCode;  return this;
    }

    public String getPolicyCompCode() {
        return policyCompCode;
    }

    public LinePriceRePriceInfo setPolicyCompCode(String policyCompCode) {
        this.policyCompCode = policyCompCode;  return this;
    }

    public String getExceptionCode() {
        return exceptionCode;
    }

    public LinePriceRePriceInfo setExceptionCode(String exceptionCode) {
        this.exceptionCode = exceptionCode;  return this;
    }
}