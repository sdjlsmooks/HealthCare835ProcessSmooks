/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_837;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.util.Date;    
import org.milyn.javabean.decoders.DateDecoder;    
import org.milyn.javabean.decoders.IntegerDecoder;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    
import java.io.StringWriter;    
import java.util.List;    
import java.util.ArrayList;    
import org.milyn.edisax.util.EDIUtils;    
import org.milyn.edisax.model.internal.DelimiterType;    
import java.util.Properties;    

public class FunctionalGroupHeader implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private String functionalIDCode;
    private String applicationSenderCode;
    private String applicationReceiverCode;
    private Date date;
    private DateDecoder dateEncoder;
    private Date time;
    private DateDecoder timeEncoder;
    private Integer groupControlNumber;
    private IntegerDecoder groupControlNumberEncoder;
    private String agencyResponsibleCode;
    private String versionReleaseIDCode;

    public FunctionalGroupHeader() {
        
        dateEncoder = new DateDecoder();
        Properties dateEncoderProperties = new Properties();
        dateEncoderProperties.setProperty("format", "yyyyMMdd");
        dateEncoder.setConfiguration(dateEncoderProperties);
        timeEncoder = new DateDecoder();
        Properties timeEncoderProperties = new Properties();
        timeEncoderProperties.setProperty("format", "HHmm");
        timeEncoder.setConfiguration(timeEncoderProperties);
        groupControlNumberEncoder = new IntegerDecoder();
    }

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = new StringWriter();

        List<String> nodeTokens = new ArrayList<String>();

        if(functionalIDCode != null) {
            nodeWriter.write(delimiters.escape(functionalIDCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(applicationSenderCode != null) {
            nodeWriter.write(delimiters.escape(applicationSenderCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(applicationReceiverCode != null) {
            nodeWriter.write(delimiters.escape(applicationReceiverCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(date != null) {
            nodeWriter.write(delimiters.escape(dateEncoder.encode(date)));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(time != null) {
            nodeWriter.write(delimiters.escape(timeEncoder.encode(time)));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(groupControlNumber != null) {
            nodeWriter.write(delimiters.escape(groupControlNumberEncoder.encode(groupControlNumber)));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(agencyResponsibleCode != null) {
            nodeWriter.write(delimiters.escape(agencyResponsibleCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(versionReleaseIDCode != null) {
            nodeWriter.write(delimiters.escape(versionReleaseIDCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeTokens.add(nodeWriter.toString());
        writer.write(EDIUtils.concatAndTruncate(nodeTokens, DelimiterType.FIELD, delimiters));
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public String getFunctionalIDCode() {
        return functionalIDCode;
    }

    public FunctionalGroupHeader setFunctionalIDCode(String functionalIDCode) {
        this.functionalIDCode = functionalIDCode;  return this;
    }

    public String getApplicationSenderCode() {
        return applicationSenderCode;
    }

    public FunctionalGroupHeader setApplicationSenderCode(String applicationSenderCode) {
        this.applicationSenderCode = applicationSenderCode;  return this;
    }

    public String getApplicationReceiverCode() {
        return applicationReceiverCode;
    }

    public FunctionalGroupHeader setApplicationReceiverCode(String applicationReceiverCode) {
        this.applicationReceiverCode = applicationReceiverCode;  return this;
    }

    public Date getDate() {
        return date;
    }

    public FunctionalGroupHeader setDate(Date date) {
        this.date = date;  return this;
    }

    public Date getTime() {
        return time;
    }

    public FunctionalGroupHeader setTime(Date time) {
        this.time = time;  return this;
    }

    public Integer getGroupControlNumber() {
        return groupControlNumber;
    }

    public FunctionalGroupHeader setGroupControlNumber(Integer groupControlNumber) {
        this.groupControlNumber = groupControlNumber;  return this;
    }

    public String getAgencyResponsibleCode() {
        return agencyResponsibleCode;
    }

    public FunctionalGroupHeader setAgencyResponsibleCode(String agencyResponsibleCode) {
        this.agencyResponsibleCode = agencyResponsibleCode;  return this;
    }

    public String getVersionReleaseIDCode() {
        return versionReleaseIDCode;
    }

    public FunctionalGroupHeader setVersionReleaseIDCode(String versionReleaseIDCode) {
        this.versionReleaseIDCode = versionReleaseIDCode;  return this;
    }
}