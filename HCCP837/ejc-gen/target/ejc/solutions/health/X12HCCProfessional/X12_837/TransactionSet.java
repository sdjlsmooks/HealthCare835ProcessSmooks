/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_837;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.util.List;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    

public class TransactionSet implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private TransactionSetHeader transactionSetHeader;
    private BeginHierarchicalTransaction beginHierarchicalTransaction;
    private Loop1000ASubmitterName loop1000ASubmitterName;
    private Loop1000BReceiverName loop1000BReceiverName;
    private List<Loop2000ABillingProviderDetail> loop2000ABillingProviderDetail;
    private TransactionSetTrailer transactionSetTrailer;

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = writer;

        if(transactionSetHeader != null) {
            nodeWriter.write("SDJLSTa3");
            nodeWriter.write(delimiters.getField());
            transactionSetHeader.write(nodeWriter, delimiters);
        }
        if(beginHierarchicalTransaction != null) {
            nodeWriter.write("SDJLBHTa4");
            nodeWriter.write(delimiters.getField());
            beginHierarchicalTransaction.write(nodeWriter, delimiters);
        }
        if(loop1000ASubmitterName != null) {
            loop1000ASubmitterName.write(nodeWriter, delimiters);
        }
        if(loop1000BReceiverName != null) {
            loop1000BReceiverName.write(nodeWriter, delimiters);
        }
        if(loop2000ABillingProviderDetail != null && !loop2000ABillingProviderDetail.isEmpty()) {
            for(Loop2000ABillingProviderDetail loop2000ABillingProviderDetailInst : loop2000ABillingProviderDetail) {
                loop2000ABillingProviderDetailInst.write(nodeWriter, delimiters);
            }
        }
        if(transactionSetTrailer != null) {
            nodeWriter.write("SE");
            nodeWriter.write(delimiters.getField());
            transactionSetTrailer.write(nodeWriter, delimiters);
        }
    }

    public TransactionSetHeader getTransactionSetHeader() {
        return transactionSetHeader;
    }

    public TransactionSet setTransactionSetHeader(TransactionSetHeader transactionSetHeader) {
        this.transactionSetHeader = transactionSetHeader;  return this;
    }

    public BeginHierarchicalTransaction getBeginHierarchicalTransaction() {
        return beginHierarchicalTransaction;
    }

    public TransactionSet setBeginHierarchicalTransaction(BeginHierarchicalTransaction beginHierarchicalTransaction) {
        this.beginHierarchicalTransaction = beginHierarchicalTransaction;  return this;
    }

    public Loop1000ASubmitterName getLoop1000ASubmitterName() {
        return loop1000ASubmitterName;
    }

    public TransactionSet setLoop1000ASubmitterName(Loop1000ASubmitterName loop1000ASubmitterName) {
        this.loop1000ASubmitterName = loop1000ASubmitterName;  return this;
    }

    public Loop1000BReceiverName getLoop1000BReceiverName() {
        return loop1000BReceiverName;
    }

    public TransactionSet setLoop1000BReceiverName(Loop1000BReceiverName loop1000BReceiverName) {
        this.loop1000BReceiverName = loop1000BReceiverName;  return this;
    }

    public List<Loop2000ABillingProviderDetail> getLoop2000ABillingProviderDetail() {
        return loop2000ABillingProviderDetail;
    }

    public TransactionSet setLoop2000ABillingProviderDetail(List<Loop2000ABillingProviderDetail> loop2000ABillingProviderDetail) {
        this.loop2000ABillingProviderDetail = loop2000ABillingProviderDetail;  return this;
    }

    public TransactionSetTrailer getTransactionSetTrailer() {
        return transactionSetTrailer;
    }

    public TransactionSet setTransactionSetTrailer(TransactionSetTrailer transactionSetTrailer) {
        this.transactionSetTrailer = transactionSetTrailer;  return this;
    }
}