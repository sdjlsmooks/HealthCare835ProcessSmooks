/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_837;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.util.List;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    

public class Loop2300ClaimInformation implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private ClaimInformation claimInformation;
    private DateOnsetCurrentIllness dateOnsetCurrentIllness;
    private InitialTreatmentDate initialTreatmentDate;
    private LastSeenDate lastSeenDate;
    private AcuteManifestation acuteManifestation;
    private AccidentDate accidentDate;
    private LastMenstrualPeriod lastMenstrualPeriod;
    private LastXRayDate lastXRayDate;
    private HearVisionPrescriptionDate hearVisionPrescriptionDate;
    private DisabilityDates disabilityDates;
    private LastWorkedDate lastWorkedDate;
    private AuthReturnToWorkedDate authReturnToWorkedDate;
    private AdmissionDate admissionDate;
    private DischargeDate dischargeDate;
    private List<AssumeRelinqCareDates> assumeRelinqCareDates;
    private PropCasuFirstContactDate propCasuFirstContactDate;
    private RepricerReceivedDate repricerReceivedDate;
    private List<ClaimSuppInformation> claimSuppInformation;
    private ContractInformation contractInformation;
    private List<PatientAmountPaid> patientAmountPaid;
    private ServiceAuthExCode serviceAuthExCode;
    private MandatoryMedicare mandatoryMedicare;
    private MammogramCertNumber mammogramCertNumber;
    private ReferralNumber referralNumber;
    private PriorAuthorization priorAuthorization;
    private PayerClaimControlNumber payerClaimControlNumber;
    private ClinicalLabNumber clinicalLabNumber;
    private RepricedClaimNumber repricedClaimNumber;
    private AdjReprClaimNumber adjReprClaimNumber;
    private InvDeviceExcemptNumber invDeviceExcemptNumber;
    private ClaimIDXmitIntermed claimIDXmitIntermed;
    private MedicalRecordNumber medicalRecordNumber;
    private DemoProjectID demoProjectID;
    private CarePlanOversight carePlanOversight;
    private List<FileInformation> fileInformation;
    private LineNote lineNote;
    private AmbulanceTransportInformation ambulanceTransportInformation;
    private SpinalManiupServiceInfo spinalManiupServiceInfo;
    private List<AmbulanceCertification> ambulanceCertification;
    private List<PatientCondition> patientCondition;
    private HomeboundIndicator homeboundIndicator;
    private EpsdtReferral epsdtReferral;
    private HealthCareDiagnosis healthCareDiagnosis;
    private AnesthesiaRelatedProcedure anesthesiaRelatedProcedure;
    private List<ConditionInformation> conditionInformation;
    private ClaimPriceRepriceInfo claimPriceRepriceInfo;
    private Loop2310AReferringProviderName loop2310AReferringProviderName;
    private Loop2310BRenderingProviderName loop2310BRenderingProviderName;
    private Loop2310CServiceFacilityLocationName loop2310CServiceFacilityLocationName;
    private Loop2310DSupervisingProviderName loop2310DSupervisingProviderName;
    private Loop2310EAmbulancePickupLocation loop2310EAmbulancePickupLocation;
    private Loop2310FAmbulanceDropOffLocation loop2310FAmbulanceDropOffLocation;
    private List<Loop2320OtherSubscriberInformation> loop2320OtherSubscriberInformation;
    private List<Loop2400ServiceLineNumber> loop2400ServiceLineNumber;

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = writer;

        if(claimInformation != null) {
            nodeWriter.write("SDJLCLMa50");
            nodeWriter.write(delimiters.getField());
            claimInformation.write(nodeWriter, delimiters);
        }
        if(dateOnsetCurrentIllness != null) {
            nodeWriter.write("DTPa51");
            nodeWriter.write(delimiters.getField());
            dateOnsetCurrentIllness.write(nodeWriter, delimiters);
        }
        if(initialTreatmentDate != null) {
            nodeWriter.write("DTPa52");
            nodeWriter.write(delimiters.getField());
            initialTreatmentDate.write(nodeWriter, delimiters);
        }
        if(lastSeenDate != null) {
            nodeWriter.write("DTPa53");
            nodeWriter.write(delimiters.getField());
            lastSeenDate.write(nodeWriter, delimiters);
        }
        if(acuteManifestation != null) {
            nodeWriter.write("DTPa54");
            nodeWriter.write(delimiters.getField());
            acuteManifestation.write(nodeWriter, delimiters);
        }
        if(accidentDate != null) {
            nodeWriter.write("DTPa55");
            nodeWriter.write(delimiters.getField());
            accidentDate.write(nodeWriter, delimiters);
        }
        if(lastMenstrualPeriod != null) {
            nodeWriter.write("DTPa56");
            nodeWriter.write(delimiters.getField());
            lastMenstrualPeriod.write(nodeWriter, delimiters);
        }
        if(lastXRayDate != null) {
            nodeWriter.write("DTPa57");
            nodeWriter.write(delimiters.getField());
            lastXRayDate.write(nodeWriter, delimiters);
        }
        if(hearVisionPrescriptionDate != null) {
            nodeWriter.write("DTPa58");
            nodeWriter.write(delimiters.getField());
            hearVisionPrescriptionDate.write(nodeWriter, delimiters);
        }
        if(disabilityDates != null) {
            nodeWriter.write("DTPa59");
            nodeWriter.write(delimiters.getField());
            disabilityDates.write(nodeWriter, delimiters);
        }
        if(lastWorkedDate != null) {
            nodeWriter.write("DTPa60");
            nodeWriter.write(delimiters.getField());
            lastWorkedDate.write(nodeWriter, delimiters);
        }
        if(authReturnToWorkedDate != null) {
            nodeWriter.write("DTPa61");
            nodeWriter.write(delimiters.getField());
            authReturnToWorkedDate.write(nodeWriter, delimiters);
        }
        if(admissionDate != null) {
            nodeWriter.write("DTPa62");
            nodeWriter.write(delimiters.getField());
            admissionDate.write(nodeWriter, delimiters);
        }
        if(dischargeDate != null) {
            nodeWriter.write("DTPa63");
            nodeWriter.write(delimiters.getField());
            dischargeDate.write(nodeWriter, delimiters);
        }
        if(assumeRelinqCareDates != null && !assumeRelinqCareDates.isEmpty()) {
            for(AssumeRelinqCareDates assumeRelinqCareDatesInst : assumeRelinqCareDates) {
                nodeWriter.write("DTPa64");
                nodeWriter.write(delimiters.getField());
                assumeRelinqCareDatesInst.write(nodeWriter, delimiters);
            }
        }
        if(propCasuFirstContactDate != null) {
            nodeWriter.write("DTPa65");
            nodeWriter.write(delimiters.getField());
            propCasuFirstContactDate.write(nodeWriter, delimiters);
        }
        if(repricerReceivedDate != null) {
            nodeWriter.write("DTPa66");
            nodeWriter.write(delimiters.getField());
            repricerReceivedDate.write(nodeWriter, delimiters);
        }
        if(claimSuppInformation != null && !claimSuppInformation.isEmpty()) {
            for(ClaimSuppInformation claimSuppInformationInst : claimSuppInformation) {
                nodeWriter.write("PWKa67");
                nodeWriter.write(delimiters.getField());
                claimSuppInformationInst.write(nodeWriter, delimiters);
            }
        }
        if(contractInformation != null) {
            nodeWriter.write("CN1");
            nodeWriter.write(delimiters.getField());
            contractInformation.write(nodeWriter, delimiters);
        }
        if(patientAmountPaid != null && !patientAmountPaid.isEmpty()) {
            for(PatientAmountPaid patientAmountPaidInst : patientAmountPaid) {
                nodeWriter.write("AMT");
                nodeWriter.write(delimiters.getField());
                patientAmountPaidInst.write(nodeWriter, delimiters);
            }
        }
        if(serviceAuthExCode != null) {
            nodeWriter.write("SDJLREF1");
            nodeWriter.write(delimiters.getField());
            serviceAuthExCode.write(nodeWriter, delimiters);
        }
        if(mandatoryMedicare != null) {
            nodeWriter.write("SDJLREF2");
            nodeWriter.write(delimiters.getField());
            mandatoryMedicare.write(nodeWriter, delimiters);
        }
        if(mammogramCertNumber != null) {
            nodeWriter.write("SDJLREF3");
            nodeWriter.write(delimiters.getField());
            mammogramCertNumber.write(nodeWriter, delimiters);
        }
        if(referralNumber != null) {
            nodeWriter.write("SDJLREF4");
            nodeWriter.write(delimiters.getField());
            referralNumber.write(nodeWriter, delimiters);
        }
        if(priorAuthorization != null) {
            nodeWriter.write("SDJLREF5");
            nodeWriter.write(delimiters.getField());
            priorAuthorization.write(nodeWriter, delimiters);
        }
        if(payerClaimControlNumber != null) {
            nodeWriter.write("SDJLREF6");
            nodeWriter.write(delimiters.getField());
            payerClaimControlNumber.write(nodeWriter, delimiters);
        }
        if(clinicalLabNumber != null) {
            nodeWriter.write("SDJLREF7");
            nodeWriter.write(delimiters.getField());
            clinicalLabNumber.write(nodeWriter, delimiters);
        }
        if(repricedClaimNumber != null) {
            nodeWriter.write("SDJLREF8");
            nodeWriter.write(delimiters.getField());
            repricedClaimNumber.write(nodeWriter, delimiters);
        }
        if(adjReprClaimNumber != null) {
            nodeWriter.write("SDJLREF9");
            nodeWriter.write(delimiters.getField());
            adjReprClaimNumber.write(nodeWriter, delimiters);
        }
        if(invDeviceExcemptNumber != null) {
            nodeWriter.write("SDJLREF9");
            nodeWriter.write(delimiters.getField());
            invDeviceExcemptNumber.write(nodeWriter, delimiters);
        }
        if(claimIDXmitIntermed != null) {
            nodeWriter.write("SDJLREF10");
            nodeWriter.write(delimiters.getField());
            claimIDXmitIntermed.write(nodeWriter, delimiters);
        }
        if(medicalRecordNumber != null) {
            nodeWriter.write("SDJLREF11");
            nodeWriter.write(delimiters.getField());
            medicalRecordNumber.write(nodeWriter, delimiters);
        }
        if(demoProjectID != null) {
            nodeWriter.write("SDJLREF12");
            nodeWriter.write(delimiters.getField());
            demoProjectID.write(nodeWriter, delimiters);
        }
        if(carePlanOversight != null) {
            nodeWriter.write("SDJLREF13");
            nodeWriter.write(delimiters.getField());
            carePlanOversight.write(nodeWriter, delimiters);
        }
        if(fileInformation != null && !fileInformation.isEmpty()) {
            for(FileInformation fileInformationInst : fileInformation) {
                nodeWriter.write("K3");
                nodeWriter.write(delimiters.getField());
                fileInformationInst.write(nodeWriter, delimiters);
            }
        }
        if(lineNote != null) {
            nodeWriter.write("NTE.(ADD|CER|DCP|DGN|TPO).*");
            nodeWriter.write(delimiters.getField());
            lineNote.write(nodeWriter, delimiters);
        }
        if(ambulanceTransportInformation != null) {
            nodeWriter.write("CR1");
            nodeWriter.write(delimiters.getField());
            ambulanceTransportInformation.write(nodeWriter, delimiters);
        }
        if(spinalManiupServiceInfo != null) {
            nodeWriter.write("CR2");
            nodeWriter.write(delimiters.getField());
            spinalManiupServiceInfo.write(nodeWriter, delimiters);
        }
        if(ambulanceCertification != null && !ambulanceCertification.isEmpty()) {
            for(AmbulanceCertification ambulanceCertificationInst : ambulanceCertification) {
                nodeWriter.write("CRC.07.+");
                nodeWriter.write(delimiters.getField());
                ambulanceCertificationInst.write(nodeWriter, delimiters);
            }
        }
        if(patientCondition != null && !patientCondition.isEmpty()) {
            for(PatientCondition patientConditionInst : patientCondition) {
                nodeWriter.write("CRC.E1.+");
                nodeWriter.write(delimiters.getField());
                patientConditionInst.write(nodeWriter, delimiters);
            }
        }
        if(homeboundIndicator != null) {
            nodeWriter.write("CRC.75.+");
            nodeWriter.write(delimiters.getField());
            homeboundIndicator.write(nodeWriter, delimiters);
        }
        if(epsdtReferral != null) {
            nodeWriter.write("CRC.ZZ.+");
            nodeWriter.write(delimiters.getField());
            epsdtReferral.write(nodeWriter, delimiters);
        }
        if(healthCareDiagnosis != null) {
            nodeWriter.write("HI");
            nodeWriter.write(delimiters.getField());
            healthCareDiagnosis.write(nodeWriter, delimiters);
        }
        if(anesthesiaRelatedProcedure != null) {
            nodeWriter.write("HI.BP.+");
            nodeWriter.write(delimiters.getField());
            anesthesiaRelatedProcedure.write(nodeWriter, delimiters);
        }
        if(conditionInformation != null && !conditionInformation.isEmpty()) {
            for(ConditionInformation conditionInformationInst : conditionInformation) {
                nodeWriter.write("HI.BG.+");
                nodeWriter.write(delimiters.getField());
                conditionInformationInst.write(nodeWriter, delimiters);
            }
        }
        if(claimPriceRepriceInfo != null) {
            nodeWriter.write("HCP");
            nodeWriter.write(delimiters.getField());
            claimPriceRepriceInfo.write(nodeWriter, delimiters);
        }
        if(loop2310AReferringProviderName != null) {
            loop2310AReferringProviderName.write(nodeWriter, delimiters);
        }
        if(loop2310BRenderingProviderName != null) {
            loop2310BRenderingProviderName.write(nodeWriter, delimiters);
        }
        if(loop2310CServiceFacilityLocationName != null) {
            loop2310CServiceFacilityLocationName.write(nodeWriter, delimiters);
        }
        if(loop2310DSupervisingProviderName != null) {
            loop2310DSupervisingProviderName.write(nodeWriter, delimiters);
        }
        if(loop2310EAmbulancePickupLocation != null) {
            loop2310EAmbulancePickupLocation.write(nodeWriter, delimiters);
        }
        if(loop2310FAmbulanceDropOffLocation != null) {
            loop2310FAmbulanceDropOffLocation.write(nodeWriter, delimiters);
        }
        if(loop2320OtherSubscriberInformation != null && !loop2320OtherSubscriberInformation.isEmpty()) {
            for(Loop2320OtherSubscriberInformation loop2320OtherSubscriberInformationInst : loop2320OtherSubscriberInformation) {
                loop2320OtherSubscriberInformationInst.write(nodeWriter, delimiters);
            }
        }
        if(loop2400ServiceLineNumber != null && !loop2400ServiceLineNumber.isEmpty()) {
            for(Loop2400ServiceLineNumber loop2400ServiceLineNumberInst : loop2400ServiceLineNumber) {
                loop2400ServiceLineNumberInst.write(nodeWriter, delimiters);
            }
        }
    }

    public ClaimInformation getClaimInformation() {
        return claimInformation;
    }

    public Loop2300ClaimInformation setClaimInformation(ClaimInformation claimInformation) {
        this.claimInformation = claimInformation;  return this;
    }

    public DateOnsetCurrentIllness getDateOnsetCurrentIllness() {
        return dateOnsetCurrentIllness;
    }

    public Loop2300ClaimInformation setDateOnsetCurrentIllness(DateOnsetCurrentIllness dateOnsetCurrentIllness) {
        this.dateOnsetCurrentIllness = dateOnsetCurrentIllness;  return this;
    }

    public InitialTreatmentDate getInitialTreatmentDate() {
        return initialTreatmentDate;
    }

    public Loop2300ClaimInformation setInitialTreatmentDate(InitialTreatmentDate initialTreatmentDate) {
        this.initialTreatmentDate = initialTreatmentDate;  return this;
    }

    public LastSeenDate getLastSeenDate() {
        return lastSeenDate;
    }

    public Loop2300ClaimInformation setLastSeenDate(LastSeenDate lastSeenDate) {
        this.lastSeenDate = lastSeenDate;  return this;
    }

    public AcuteManifestation getAcuteManifestation() {
        return acuteManifestation;
    }

    public Loop2300ClaimInformation setAcuteManifestation(AcuteManifestation acuteManifestation) {
        this.acuteManifestation = acuteManifestation;  return this;
    }

    public AccidentDate getAccidentDate() {
        return accidentDate;
    }

    public Loop2300ClaimInformation setAccidentDate(AccidentDate accidentDate) {
        this.accidentDate = accidentDate;  return this;
    }

    public LastMenstrualPeriod getLastMenstrualPeriod() {
        return lastMenstrualPeriod;
    }

    public Loop2300ClaimInformation setLastMenstrualPeriod(LastMenstrualPeriod lastMenstrualPeriod) {
        this.lastMenstrualPeriod = lastMenstrualPeriod;  return this;
    }

    public LastXRayDate getLastXRayDate() {
        return lastXRayDate;
    }

    public Loop2300ClaimInformation setLastXRayDate(LastXRayDate lastXRayDate) {
        this.lastXRayDate = lastXRayDate;  return this;
    }

    public HearVisionPrescriptionDate getHearVisionPrescriptionDate() {
        return hearVisionPrescriptionDate;
    }

    public Loop2300ClaimInformation setHearVisionPrescriptionDate(HearVisionPrescriptionDate hearVisionPrescriptionDate) {
        this.hearVisionPrescriptionDate = hearVisionPrescriptionDate;  return this;
    }

    public DisabilityDates getDisabilityDates() {
        return disabilityDates;
    }

    public Loop2300ClaimInformation setDisabilityDates(DisabilityDates disabilityDates) {
        this.disabilityDates = disabilityDates;  return this;
    }

    public LastWorkedDate getLastWorkedDate() {
        return lastWorkedDate;
    }

    public Loop2300ClaimInformation setLastWorkedDate(LastWorkedDate lastWorkedDate) {
        this.lastWorkedDate = lastWorkedDate;  return this;
    }

    public AuthReturnToWorkedDate getAuthReturnToWorkedDate() {
        return authReturnToWorkedDate;
    }

    public Loop2300ClaimInformation setAuthReturnToWorkedDate(AuthReturnToWorkedDate authReturnToWorkedDate) {
        this.authReturnToWorkedDate = authReturnToWorkedDate;  return this;
    }

    public AdmissionDate getAdmissionDate() {
        return admissionDate;
    }

    public Loop2300ClaimInformation setAdmissionDate(AdmissionDate admissionDate) {
        this.admissionDate = admissionDate;  return this;
    }

    public DischargeDate getDischargeDate() {
        return dischargeDate;
    }

    public Loop2300ClaimInformation setDischargeDate(DischargeDate dischargeDate) {
        this.dischargeDate = dischargeDate;  return this;
    }

    public List<AssumeRelinqCareDates> getAssumeRelinqCareDates() {
        return assumeRelinqCareDates;
    }

    public Loop2300ClaimInformation setAssumeRelinqCareDates(List<AssumeRelinqCareDates> assumeRelinqCareDates) {
        this.assumeRelinqCareDates = assumeRelinqCareDates;  return this;
    }

    public PropCasuFirstContactDate getPropCasuFirstContactDate() {
        return propCasuFirstContactDate;
    }

    public Loop2300ClaimInformation setPropCasuFirstContactDate(PropCasuFirstContactDate propCasuFirstContactDate) {
        this.propCasuFirstContactDate = propCasuFirstContactDate;  return this;
    }

    public RepricerReceivedDate getRepricerReceivedDate() {
        return repricerReceivedDate;
    }

    public Loop2300ClaimInformation setRepricerReceivedDate(RepricerReceivedDate repricerReceivedDate) {
        this.repricerReceivedDate = repricerReceivedDate;  return this;
    }

    public List<ClaimSuppInformation> getClaimSuppInformation() {
        return claimSuppInformation;
    }

    public Loop2300ClaimInformation setClaimSuppInformation(List<ClaimSuppInformation> claimSuppInformation) {
        this.claimSuppInformation = claimSuppInformation;  return this;
    }

    public ContractInformation getContractInformation() {
        return contractInformation;
    }

    public Loop2300ClaimInformation setContractInformation(ContractInformation contractInformation) {
        this.contractInformation = contractInformation;  return this;
    }

    public List<PatientAmountPaid> getPatientAmountPaid() {
        return patientAmountPaid;
    }

    public Loop2300ClaimInformation setPatientAmountPaid(List<PatientAmountPaid> patientAmountPaid) {
        this.patientAmountPaid = patientAmountPaid;  return this;
    }

    public ServiceAuthExCode getServiceAuthExCode() {
        return serviceAuthExCode;
    }

    public Loop2300ClaimInformation setServiceAuthExCode(ServiceAuthExCode serviceAuthExCode) {
        this.serviceAuthExCode = serviceAuthExCode;  return this;
    }

    public MandatoryMedicare getMandatoryMedicare() {
        return mandatoryMedicare;
    }

    public Loop2300ClaimInformation setMandatoryMedicare(MandatoryMedicare mandatoryMedicare) {
        this.mandatoryMedicare = mandatoryMedicare;  return this;
    }

    public MammogramCertNumber getMammogramCertNumber() {
        return mammogramCertNumber;
    }

    public Loop2300ClaimInformation setMammogramCertNumber(MammogramCertNumber mammogramCertNumber) {
        this.mammogramCertNumber = mammogramCertNumber;  return this;
    }

    public ReferralNumber getReferralNumber() {
        return referralNumber;
    }

    public Loop2300ClaimInformation setReferralNumber(ReferralNumber referralNumber) {
        this.referralNumber = referralNumber;  return this;
    }

    public PriorAuthorization getPriorAuthorization() {
        return priorAuthorization;
    }

    public Loop2300ClaimInformation setPriorAuthorization(PriorAuthorization priorAuthorization) {
        this.priorAuthorization = priorAuthorization;  return this;
    }

    public PayerClaimControlNumber getPayerClaimControlNumber() {
        return payerClaimControlNumber;
    }

    public Loop2300ClaimInformation setPayerClaimControlNumber(PayerClaimControlNumber payerClaimControlNumber) {
        this.payerClaimControlNumber = payerClaimControlNumber;  return this;
    }

    public ClinicalLabNumber getClinicalLabNumber() {
        return clinicalLabNumber;
    }

    public Loop2300ClaimInformation setClinicalLabNumber(ClinicalLabNumber clinicalLabNumber) {
        this.clinicalLabNumber = clinicalLabNumber;  return this;
    }

    public RepricedClaimNumber getRepricedClaimNumber() {
        return repricedClaimNumber;
    }

    public Loop2300ClaimInformation setRepricedClaimNumber(RepricedClaimNumber repricedClaimNumber) {
        this.repricedClaimNumber = repricedClaimNumber;  return this;
    }

    public AdjReprClaimNumber getAdjReprClaimNumber() {
        return adjReprClaimNumber;
    }

    public Loop2300ClaimInformation setAdjReprClaimNumber(AdjReprClaimNumber adjReprClaimNumber) {
        this.adjReprClaimNumber = adjReprClaimNumber;  return this;
    }

    public InvDeviceExcemptNumber getInvDeviceExcemptNumber() {
        return invDeviceExcemptNumber;
    }

    public Loop2300ClaimInformation setInvDeviceExcemptNumber(InvDeviceExcemptNumber invDeviceExcemptNumber) {
        this.invDeviceExcemptNumber = invDeviceExcemptNumber;  return this;
    }

    public ClaimIDXmitIntermed getClaimIDXmitIntermed() {
        return claimIDXmitIntermed;
    }

    public Loop2300ClaimInformation setClaimIDXmitIntermed(ClaimIDXmitIntermed claimIDXmitIntermed) {
        this.claimIDXmitIntermed = claimIDXmitIntermed;  return this;
    }

    public MedicalRecordNumber getMedicalRecordNumber() {
        return medicalRecordNumber;
    }

    public Loop2300ClaimInformation setMedicalRecordNumber(MedicalRecordNumber medicalRecordNumber) {
        this.medicalRecordNumber = medicalRecordNumber;  return this;
    }

    public DemoProjectID getDemoProjectID() {
        return demoProjectID;
    }

    public Loop2300ClaimInformation setDemoProjectID(DemoProjectID demoProjectID) {
        this.demoProjectID = demoProjectID;  return this;
    }

    public CarePlanOversight getCarePlanOversight() {
        return carePlanOversight;
    }

    public Loop2300ClaimInformation setCarePlanOversight(CarePlanOversight carePlanOversight) {
        this.carePlanOversight = carePlanOversight;  return this;
    }

    public List<FileInformation> getFileInformation() {
        return fileInformation;
    }

    public Loop2300ClaimInformation setFileInformation(List<FileInformation> fileInformation) {
        this.fileInformation = fileInformation;  return this;
    }

    public LineNote getLineNote() {
        return lineNote;
    }

    public Loop2300ClaimInformation setLineNote(LineNote lineNote) {
        this.lineNote = lineNote;  return this;
    }

    public AmbulanceTransportInformation getAmbulanceTransportInformation() {
        return ambulanceTransportInformation;
    }

    public Loop2300ClaimInformation setAmbulanceTransportInformation(AmbulanceTransportInformation ambulanceTransportInformation) {
        this.ambulanceTransportInformation = ambulanceTransportInformation;  return this;
    }

    public SpinalManiupServiceInfo getSpinalManiupServiceInfo() {
        return spinalManiupServiceInfo;
    }

    public Loop2300ClaimInformation setSpinalManiupServiceInfo(SpinalManiupServiceInfo spinalManiupServiceInfo) {
        this.spinalManiupServiceInfo = spinalManiupServiceInfo;  return this;
    }

    public List<AmbulanceCertification> getAmbulanceCertification() {
        return ambulanceCertification;
    }

    public Loop2300ClaimInformation setAmbulanceCertification(List<AmbulanceCertification> ambulanceCertification) {
        this.ambulanceCertification = ambulanceCertification;  return this;
    }

    public List<PatientCondition> getPatientCondition() {
        return patientCondition;
    }

    public Loop2300ClaimInformation setPatientCondition(List<PatientCondition> patientCondition) {
        this.patientCondition = patientCondition;  return this;
    }

    public HomeboundIndicator getHomeboundIndicator() {
        return homeboundIndicator;
    }

    public Loop2300ClaimInformation setHomeboundIndicator(HomeboundIndicator homeboundIndicator) {
        this.homeboundIndicator = homeboundIndicator;  return this;
    }

    public EpsdtReferral getEpsdtReferral() {
        return epsdtReferral;
    }

    public Loop2300ClaimInformation setEpsdtReferral(EpsdtReferral epsdtReferral) {
        this.epsdtReferral = epsdtReferral;  return this;
    }

    public HealthCareDiagnosis getHealthCareDiagnosis() {
        return healthCareDiagnosis;
    }

    public Loop2300ClaimInformation setHealthCareDiagnosis(HealthCareDiagnosis healthCareDiagnosis) {
        this.healthCareDiagnosis = healthCareDiagnosis;  return this;
    }

    public AnesthesiaRelatedProcedure getAnesthesiaRelatedProcedure() {
        return anesthesiaRelatedProcedure;
    }

    public Loop2300ClaimInformation setAnesthesiaRelatedProcedure(AnesthesiaRelatedProcedure anesthesiaRelatedProcedure) {
        this.anesthesiaRelatedProcedure = anesthesiaRelatedProcedure;  return this;
    }

    public List<ConditionInformation> getConditionInformation() {
        return conditionInformation;
    }

    public Loop2300ClaimInformation setConditionInformation(List<ConditionInformation> conditionInformation) {
        this.conditionInformation = conditionInformation;  return this;
    }

    public ClaimPriceRepriceInfo getClaimPriceRepriceInfo() {
        return claimPriceRepriceInfo;
    }

    public Loop2300ClaimInformation setClaimPriceRepriceInfo(ClaimPriceRepriceInfo claimPriceRepriceInfo) {
        this.claimPriceRepriceInfo = claimPriceRepriceInfo;  return this;
    }

    public Loop2310AReferringProviderName getLoop2310AReferringProviderName() {
        return loop2310AReferringProviderName;
    }

    public Loop2300ClaimInformation setLoop2310AReferringProviderName(Loop2310AReferringProviderName loop2310AReferringProviderName) {
        this.loop2310AReferringProviderName = loop2310AReferringProviderName;  return this;
    }

    public Loop2310BRenderingProviderName getLoop2310BRenderingProviderName() {
        return loop2310BRenderingProviderName;
    }

    public Loop2300ClaimInformation setLoop2310BRenderingProviderName(Loop2310BRenderingProviderName loop2310BRenderingProviderName) {
        this.loop2310BRenderingProviderName = loop2310BRenderingProviderName;  return this;
    }

    public Loop2310CServiceFacilityLocationName getLoop2310CServiceFacilityLocationName() {
        return loop2310CServiceFacilityLocationName;
    }

    public Loop2300ClaimInformation setLoop2310CServiceFacilityLocationName(Loop2310CServiceFacilityLocationName loop2310CServiceFacilityLocationName) {
        this.loop2310CServiceFacilityLocationName = loop2310CServiceFacilityLocationName;  return this;
    }

    public Loop2310DSupervisingProviderName getLoop2310DSupervisingProviderName() {
        return loop2310DSupervisingProviderName;
    }

    public Loop2300ClaimInformation setLoop2310DSupervisingProviderName(Loop2310DSupervisingProviderName loop2310DSupervisingProviderName) {
        this.loop2310DSupervisingProviderName = loop2310DSupervisingProviderName;  return this;
    }

    public Loop2310EAmbulancePickupLocation getLoop2310EAmbulancePickupLocation() {
        return loop2310EAmbulancePickupLocation;
    }

    public Loop2300ClaimInformation setLoop2310EAmbulancePickupLocation(Loop2310EAmbulancePickupLocation loop2310EAmbulancePickupLocation) {
        this.loop2310EAmbulancePickupLocation = loop2310EAmbulancePickupLocation;  return this;
    }

    public Loop2310FAmbulanceDropOffLocation getLoop2310FAmbulanceDropOffLocation() {
        return loop2310FAmbulanceDropOffLocation;
    }

    public Loop2300ClaimInformation setLoop2310FAmbulanceDropOffLocation(Loop2310FAmbulanceDropOffLocation loop2310FAmbulanceDropOffLocation) {
        this.loop2310FAmbulanceDropOffLocation = loop2310FAmbulanceDropOffLocation;  return this;
    }

    public List<Loop2320OtherSubscriberInformation> getLoop2320OtherSubscriberInformation() {
        return loop2320OtherSubscriberInformation;
    }

    public Loop2300ClaimInformation setLoop2320OtherSubscriberInformation(List<Loop2320OtherSubscriberInformation> loop2320OtherSubscriberInformation) {
        this.loop2320OtherSubscriberInformation = loop2320OtherSubscriberInformation;  return this;
    }

    public List<Loop2400ServiceLineNumber> getLoop2400ServiceLineNumber() {
        return loop2400ServiceLineNumber;
    }

    public Loop2300ClaimInformation setLoop2400ServiceLineNumber(List<Loop2400ServiceLineNumber> loop2400ServiceLineNumber) {
        this.loop2400ServiceLineNumber = loop2400ServiceLineNumber;  return this;
    }
}