/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_837;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import org.milyn.javabean.decoders.DoubleDecoder;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    
import java.io.StringWriter;    
import java.util.List;    
import java.util.ArrayList;    
import org.milyn.edisax.util.EDIUtils;    
import org.milyn.edisax.model.internal.DelimiterType;    

public class DrugQuantity implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private String classOfTradeCode;
    private String priceIDCode;
    private String unitPrice;
    private Double quantity;
    private DoubleDecoder quantityEncoder;
    private String compositeUnitOfMeasure;
    private String priceMultiplierQualifier;
    private String mulitiplier;
    private String monetaryAmount;
    private String basisUnitPriceCode;
    private String conditionValue;
    private String multPriceQuantity;

    public DrugQuantity() {
        
        quantityEncoder = new DoubleDecoder();
    }

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = new StringWriter();

        List<String> nodeTokens = new ArrayList<String>();

        if(classOfTradeCode != null) {
            nodeWriter.write(delimiters.escape(classOfTradeCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(priceIDCode != null) {
            nodeWriter.write(delimiters.escape(priceIDCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(unitPrice != null) {
            nodeWriter.write(delimiters.escape(unitPrice.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(quantity != null) {
            nodeWriter.write(delimiters.escape(quantityEncoder.encode(quantity)));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(compositeUnitOfMeasure != null) {
            nodeWriter.write(delimiters.escape(compositeUnitOfMeasure.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(priceMultiplierQualifier != null) {
            nodeWriter.write(delimiters.escape(priceMultiplierQualifier.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(mulitiplier != null) {
            nodeWriter.write(delimiters.escape(mulitiplier.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(monetaryAmount != null) {
            nodeWriter.write(delimiters.escape(monetaryAmount.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(basisUnitPriceCode != null) {
            nodeWriter.write(delimiters.escape(basisUnitPriceCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(conditionValue != null) {
            nodeWriter.write(delimiters.escape(conditionValue.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(multPriceQuantity != null) {
            nodeWriter.write(delimiters.escape(multPriceQuantity.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeTokens.add(nodeWriter.toString());
        writer.write(EDIUtils.concatAndTruncate(nodeTokens, DelimiterType.FIELD, delimiters));
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public String getClassOfTradeCode() {
        return classOfTradeCode;
    }

    public DrugQuantity setClassOfTradeCode(String classOfTradeCode) {
        this.classOfTradeCode = classOfTradeCode;  return this;
    }

    public String getPriceIDCode() {
        return priceIDCode;
    }

    public DrugQuantity setPriceIDCode(String priceIDCode) {
        this.priceIDCode = priceIDCode;  return this;
    }

    public String getUnitPrice() {
        return unitPrice;
    }

    public DrugQuantity setUnitPrice(String unitPrice) {
        this.unitPrice = unitPrice;  return this;
    }

    public Double getQuantity() {
        return quantity;
    }

    public DrugQuantity setQuantity(Double quantity) {
        this.quantity = quantity;  return this;
    }

    public String getCompositeUnitOfMeasure() {
        return compositeUnitOfMeasure;
    }

    public DrugQuantity setCompositeUnitOfMeasure(String compositeUnitOfMeasure) {
        this.compositeUnitOfMeasure = compositeUnitOfMeasure;  return this;
    }

    public String getPriceMultiplierQualifier() {
        return priceMultiplierQualifier;
    }

    public DrugQuantity setPriceMultiplierQualifier(String priceMultiplierQualifier) {
        this.priceMultiplierQualifier = priceMultiplierQualifier;  return this;
    }

    public String getMulitiplier() {
        return mulitiplier;
    }

    public DrugQuantity setMulitiplier(String mulitiplier) {
        this.mulitiplier = mulitiplier;  return this;
    }

    public String getMonetaryAmount() {
        return monetaryAmount;
    }

    public DrugQuantity setMonetaryAmount(String monetaryAmount) {
        this.monetaryAmount = monetaryAmount;  return this;
    }

    public String getBasisUnitPriceCode() {
        return basisUnitPriceCode;
    }

    public DrugQuantity setBasisUnitPriceCode(String basisUnitPriceCode) {
        this.basisUnitPriceCode = basisUnitPriceCode;  return this;
    }

    public String getConditionValue() {
        return conditionValue;
    }

    public DrugQuantity setConditionValue(String conditionValue) {
        this.conditionValue = conditionValue;  return this;
    }

    public String getMultPriceQuantity() {
        return multPriceQuantity;
    }

    public DrugQuantity setMultPriceQuantity(String multPriceQuantity) {
        this.multPriceQuantity = multPriceQuantity;  return this;
    }
}