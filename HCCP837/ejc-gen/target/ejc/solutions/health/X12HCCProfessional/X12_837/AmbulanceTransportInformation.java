/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_837;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    
import java.io.StringWriter;    
import java.util.List;    
import java.util.ArrayList;    
import org.milyn.edisax.util.EDIUtils;    
import org.milyn.edisax.model.internal.DelimiterType;    

public class AmbulanceTransportInformation implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private String unitBasisMeasurementCode;
    private String weight;
    private String ambulanceTransCode;
    private String ambulanceReasonCode;
    private String unitBasisMeasurementCode2;
    private String quantity;
    private String addressInformation;
    private String addressInformation2;
    private String description;
    private String description2;

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = new StringWriter();

        List<String> nodeTokens = new ArrayList<String>();

        if(unitBasisMeasurementCode != null) {
            nodeWriter.write(delimiters.escape(unitBasisMeasurementCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(weight != null) {
            nodeWriter.write(delimiters.escape(weight.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(ambulanceTransCode != null) {
            nodeWriter.write(delimiters.escape(ambulanceTransCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(ambulanceReasonCode != null) {
            nodeWriter.write(delimiters.escape(ambulanceReasonCode.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(unitBasisMeasurementCode2 != null) {
            nodeWriter.write(delimiters.escape(unitBasisMeasurementCode2.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(quantity != null) {
            nodeWriter.write(delimiters.escape(quantity.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(addressInformation != null) {
            nodeWriter.write(delimiters.escape(addressInformation.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(addressInformation2 != null) {
            nodeWriter.write(delimiters.escape(addressInformation2.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(description != null) {
            nodeWriter.write(delimiters.escape(description.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(description2 != null) {
            nodeWriter.write(delimiters.escape(description2.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeTokens.add(nodeWriter.toString());
        writer.write(EDIUtils.concatAndTruncate(nodeTokens, DelimiterType.FIELD, delimiters));
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public String getUnitBasisMeasurementCode() {
        return unitBasisMeasurementCode;
    }

    public AmbulanceTransportInformation setUnitBasisMeasurementCode(String unitBasisMeasurementCode) {
        this.unitBasisMeasurementCode = unitBasisMeasurementCode;  return this;
    }

    public String getWeight() {
        return weight;
    }

    public AmbulanceTransportInformation setWeight(String weight) {
        this.weight = weight;  return this;
    }

    public String getAmbulanceTransCode() {
        return ambulanceTransCode;
    }

    public AmbulanceTransportInformation setAmbulanceTransCode(String ambulanceTransCode) {
        this.ambulanceTransCode = ambulanceTransCode;  return this;
    }

    public String getAmbulanceReasonCode() {
        return ambulanceReasonCode;
    }

    public AmbulanceTransportInformation setAmbulanceReasonCode(String ambulanceReasonCode) {
        this.ambulanceReasonCode = ambulanceReasonCode;  return this;
    }

    public String getUnitBasisMeasurementCode2() {
        return unitBasisMeasurementCode2;
    }

    public AmbulanceTransportInformation setUnitBasisMeasurementCode2(String unitBasisMeasurementCode2) {
        this.unitBasisMeasurementCode2 = unitBasisMeasurementCode2;  return this;
    }

    public String getQuantity() {
        return quantity;
    }

    public AmbulanceTransportInformation setQuantity(String quantity) {
        this.quantity = quantity;  return this;
    }

    public String getAddressInformation() {
        return addressInformation;
    }

    public AmbulanceTransportInformation setAddressInformation(String addressInformation) {
        this.addressInformation = addressInformation;  return this;
    }

    public String getAddressInformation2() {
        return addressInformation2;
    }

    public AmbulanceTransportInformation setAddressInformation2(String addressInformation2) {
        this.addressInformation2 = addressInformation2;  return this;
    }

    public String getDescription() {
        return description;
    }

    public AmbulanceTransportInformation setDescription(String description) {
        this.description = description;  return this;
    }

    public String getDescription2() {
        return description2;
    }

    public AmbulanceTransportInformation setDescription2(String description2) {
        this.description2 = description2;  return this;
    }
}