/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package solutions.health.X12HCCProfessional.X12_837;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.util.List;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    

public class Loop2010BBPayerName implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private PayerName payerName;
    private PayerAddress payerAddress;
    private PayerCityStateZipCode payerCityStateZipCode;
    private List<PayerSecondaryInfo> payerSecondaryInfo;
    private List<BillingProvider> billingProvider;

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = writer;

        if(payerName != null) {
            nodeWriter.write("SDJLNM1_8a36");
            nodeWriter.write(delimiters.getField());
            payerName.write(nodeWriter, delimiters);
        }
        if(payerAddress != null) {
            nodeWriter.write("SDJLN5_2a37");
            nodeWriter.write(delimiters.getField());
            payerAddress.write(nodeWriter, delimiters);
        }
        if(payerCityStateZipCode != null) {
            nodeWriter.write("SDJLN5_2a38");
            nodeWriter.write(delimiters.getField());
            payerCityStateZipCode.write(nodeWriter, delimiters);
        }
        if(payerSecondaryInfo != null && !payerSecondaryInfo.isEmpty()) {
            for(PayerSecondaryInfo payerSecondaryInfoInst : payerSecondaryInfo) {
                nodeWriter.write("SDJLREF7a39");
                nodeWriter.write(delimiters.getField());
                payerSecondaryInfoInst.write(nodeWriter, delimiters);
            }
        }
        if(billingProvider != null && !billingProvider.isEmpty()) {
            for(BillingProvider billingProviderInst : billingProvider) {
                nodeWriter.write("SDJLREF8a40");
                nodeWriter.write(delimiters.getField());
                billingProviderInst.write(nodeWriter, delimiters);
            }
        }
    }

    public PayerName getPayerName() {
        return payerName;
    }

    public Loop2010BBPayerName setPayerName(PayerName payerName) {
        this.payerName = payerName;  return this;
    }

    public PayerAddress getPayerAddress() {
        return payerAddress;
    }

    public Loop2010BBPayerName setPayerAddress(PayerAddress payerAddress) {
        this.payerAddress = payerAddress;  return this;
    }

    public PayerCityStateZipCode getPayerCityStateZipCode() {
        return payerCityStateZipCode;
    }

    public Loop2010BBPayerName setPayerCityStateZipCode(PayerCityStateZipCode payerCityStateZipCode) {
        this.payerCityStateZipCode = payerCityStateZipCode;  return this;
    }

    public List<PayerSecondaryInfo> getPayerSecondaryInfo() {
        return payerSecondaryInfo;
    }

    public Loop2010BBPayerName setPayerSecondaryInfo(List<PayerSecondaryInfo> payerSecondaryInfo) {
        this.payerSecondaryInfo = payerSecondaryInfo;  return this;
    }

    public List<BillingProvider> getBillingProvider() {
        return billingProvider;
    }

    public Loop2010BBPayerName setBillingProvider(List<BillingProvider> billingProvider) {
        this.billingProvider = billingProvider;  return this;
    }
}